import{isPercent as t}from"../../parser/percent.min.mjs";import{parseGradientUnits as r,parseType as n}from"./misc.min.mjs";function e(t,r){return t.getAttribute(r)}function i(t){return{x1:e(t,"x1")||0,y1:e(t,"y1")||0,x2:e(t,"x2")||"100%",y2:e(t,"y2")||0}}function y(t){return{x1:e(t,"fx")||e(t,"cx")||"50%",y1:e(t,"fy")||e(t,"cy")||"50%",r1:0,x2:e(t,"cx")||"50%",y2:e(t,"cy")||"50%",r2:e(t,"r")||"50%"}}function c(e,c){return function(r,n){let e,{width:i,height:y,gradientUnits:c}=n;return Object.keys(r).reduce(((n,o)=>{const f=r[o];return"Infinity"===f?e=1:"-Infinity"===f?e=0:(e="string"==typeof f?parseFloat(f):f,"string"==typeof f&&t(f)&&(e*=.01,"pixels"===c&&("x1"!==o&&"x2"!==o&&"r2"!==o||(e*=i),"y1"!==o&&"y2"!==o||(e*=y)))),n[o]=e,n}),{})}("linear"===n(e)?i(e):y(e),{...c,gradientUnits:r(e)})}export{c as parseCoords,i as parseLinearCoords,y as parseRadialCoords};
//# sourceMappingURL=parseCoords.min.mjs.map
