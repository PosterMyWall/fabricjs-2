import{defineProperty as e}from"../../_virtual/_rollupPluginBabelHelpers.min.mjs";import{Color as a}from"../color/Color.min.mjs";import{BaseFilter as o}from"./BaseFilter.min.mjs";import{classRegistry as r}from"../ClassRegistry.min.mjs";import{blendColorFragmentSource as t}from"./shaders/blendColor.min.mjs";const s={color:"#F95C63",mode:"multiply",alpha:1};class n extends o{getCacheKey(){return`${this.type}_${this.mode}`}getFragmentSource(){return`\n      precision highp float;\n      uniform sampler2D uTexture;\n      uniform vec4 uColor;\n      varying vec2 vTexCoord;\n      void main() {\n        vec4 color = texture2D(uTexture, vTexCoord);\n        gl_FragColor = color;\n        if (color.a > 0.0) {\n          ${t[this.mode]}\n        }\n      }\n      `}applyTo2d(e){let{imageData:{data:o}}=e;const r=new a(this.color).getSource(),t=this.alpha,s=r[0]*t,n=r[1]*t,i=r[2]*t,l=1-t;for(let e=0;e<o.length;e+=4){const a=o[e],r=o[e+1],t=o[e+2];let m,c,h;switch(this.mode){case"multiply":m=a*s/255,c=r*n/255,h=t*i/255;break;case"screen":m=255-(255-a)*(255-s)/255,c=255-(255-r)*(255-n)/255,h=255-(255-t)*(255-i)/255;break;case"add":m=a+s,c=r+n,h=t+i;break;case"difference":m=Math.abs(a-s),c=Math.abs(r-n),h=Math.abs(t-i);break;case"subtract":m=a-s,c=r-n,h=t-i;break;case"darken":m=Math.min(a,s),c=Math.min(r,n),h=Math.min(t,i);break;case"lighten":m=Math.max(a,s),c=Math.max(r,n),h=Math.max(t,i);break;case"overlay":m=s<128?2*a*s/255:255-2*(255-a)*(255-s)/255,c=n<128?2*r*n/255:255-2*(255-r)*(255-n)/255,h=i<128?2*t*i/255:255-2*(255-t)*(255-i)/255;break;case"exclusion":m=s+a-2*s*a/255,c=n+r-2*n*r/255,h=i+t-2*i*t/255;break;case"tint":m=s+a*l,c=n+r*l,h=i+t*l}o[e]=m,o[e+1]=c,o[e+2]=h}}sendUniformData(e,o){const r=new a(this.color).getSource();r[0]=this.alpha*r[0]/255,r[1]=this.alpha*r[1]/255,r[2]=this.alpha*r[2]/255,r[3]=this.alpha,e.uniform4fv(o.uColor,r)}}e(n,"defaults",s),e(n,"type","BlendColor"),e(n,"uniformLocations",["uColor"]),r.setClass(n);export{n as BlendColor,s as blendColorDefaultValues};
//# sourceMappingURL=BlendColor.min.mjs.map
