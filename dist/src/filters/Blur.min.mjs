import{defineProperty as t}from"../../_virtual/_rollupPluginBabelHelpers.min.mjs";import{BaseFilter as e}from"./BaseFilter.min.mjs";import{isWebGLPipelineState as s}from"./utils.min.mjs";import{classRegistry as o}from"../ClassRegistry.min.mjs";import{fragmentSource as r}from"./shaders/blur.min.mjs";const i={blur:0};class a extends e{getFragmentSource(){return r}applyTo(t){s(t)?(this.aspectRatio=t.sourceWidth/t.sourceHeight,t.passes++,this._setupFrameBuffer(t),this.horizontal=!0,this.applyToWebGL(t),this._swapTextures(t),this._setupFrameBuffer(t),this.horizontal=!1,this.applyToWebGL(t),this._swapTextures(t)):this.applyTo2d(t)}applyTo2d(t){let{imageData:{data:e,width:s,height:o}}=t;this.aspectRatio=s/o,this.horizontal=!0;let r=this.getBlurValue()*s;const i=new Uint8ClampedArray(e),a=4*s;for(let t=0;t<e.length;t+=4){let s=0,o=0,l=0,h=0,n=0;const u=t-t%a,p=u+a;for(let i=-14;i<15;i++){const a=i/15,m=4*Math.floor(r*a),c=1-Math.abs(a);let f=t+m;f<u?f=u:f>p&&(f=p);const g=e[f+3]*c;s+=e[f]*g,o+=e[f+1]*g,l+=e[f+2]*g,h+=g,n+=c}i[t]=s/h,i[t+1]=o/h,i[t+2]=l/h,i[t+3]=h/n}this.horizontal=!1,r=this.getBlurValue()*o;for(let t=0;t<i.length;t+=4){let s=0,o=0,l=0,h=0,n=0;const u=t%a,p=i.length-a+u;for(let e=-14;e<15;e++){const m=e/15,c=Math.floor(r*m)*a,f=1-Math.abs(m);let g=t+c;g<u?g=u:g>p&&(g=p);const d=i[g+3]*f;s+=i[g]*d,o+=i[g+1]*d,l+=i[g+2]*d,h+=d,n+=f}e[t]=s/h,e[t+1]=o/h,e[t+2]=l/h,e[t+3]=h/n}}sendUniformData(t,e){const s=this.chooseRightDelta();t.uniform2fv(e.uDelta,s)}isNeutralState(){return 0===this.blur}getBlurValue(){let t=1;const{horizontal:e,aspectRatio:s}=this;return e?s>1&&(t=1/s):s<1&&(t=s),t*this.blur*.12}chooseRightDelta(){const t=this.getBlurValue();return this.horizontal?[t,0]:[0,t]}}t(a,"type","Blur"),t(a,"defaults",i),t(a,"uniformLocations",["uDelta"]),o.setClass(a);export{a as Blur,i as blurDefaultValues};
//# sourceMappingURL=Blur.min.mjs.map
