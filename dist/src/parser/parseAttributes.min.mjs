import{DEFAULT_SVG_FONT_SIZE as t}from"../constants.min.mjs";import{parseUnit as o}from"../util/misc/svgParsing.min.mjs";import{svgValidParentsRegEx as m,cPath as r,fSize as n}from"./constants.min.mjs";import{getGlobalStylesForElement as e}from"./getGlobalStylesForElement.min.mjs";import{normalizeAttr as i}from"./normalizeAttr.min.mjs";import{normalizeValue as s}from"./normalizeValue.min.mjs";import{parseFontDeclaration as a}from"./parseFontDeclaration.min.mjs";import{parseStyleAttribute as f}from"./parseStyleAttribute.min.mjs";import{setStrokeFillOpacity as p}from"./setStrokeFillOpacity.min.mjs";function l(c,u,j){if(!c)return{};let d,S={},b=t;c.parentNode&&m.test(c.parentNode.nodeName)&&(S=l(c.parentElement,u,j),S.fontSize&&(d=b=o(S.fontSize)));const g={...u.reduce(((t,o)=>{const m=c.getAttribute(o);return m&&(t[o]=m),t}),{}),...e(c,j),...f(c)};g[r]&&c.setAttribute(r,g[r]),g[n]&&(d=o(g[n],b),g[n]=`${d}`);const z={};for(const t in g){const o=i(t),m=s(o,g[t],S,d);z[o]=m}z&&z.font&&a(z.font,z);const A={...S,...z};return m.test(c.nodeName)?A:p(A)}export{l as parseAttributes};
//# sourceMappingURL=parseAttributes.min.mjs.map
