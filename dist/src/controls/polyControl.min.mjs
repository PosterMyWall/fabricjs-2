import{Point as t}from"../Point.min.mjs";import{Control as n}from"./Control.min.mjs";import{multiplyTransformMatrices as r}from"../util/misc/matrix.min.mjs";import{wrapWithFireEvent as o}from"./wrapWithFireEvent.min.mjs";import{sendPointToPlane as i}from"../util/misc/planeChange.min.mjs";import{MODIFY_POLY as s}from"../constants.min.mjs";const e=s,m=n=>function(o,i,s){const{points:e,pathOffset:m}=s;return new t(e[n]).subtract(m).transform(r(s.getViewportTransform(),s.calcTransformMatrix()))},a=(n,r,o,s)=>{const{target:e,pointIndex:m}=r,a=e,c=i(new t(o,s),void 0,a.calcOwnMatrix());return a.points[m]=c.add(a.pathOffset),a.setDimensions(),a.set("dirty",!0),!0},c=(n,r)=>function(o,i,s,e){const m=i.target,a=new t(m.points[(n>0?n:m.points.length)-1]),c=a.subtract(m.pathOffset).transform(m.calcOwnMatrix()),f=r(o,{...i,pointIndex:n},s,e),p=a.subtract(m.pathOffset).transform(m.calcOwnMatrix()).subtract(c);return m.left-=p.x,m.top-=p.y,f},f=t=>o(e,c(t,a));function p(t){let r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const o={};for(let i=0;i<("number"==typeof t?t:t.points.length);i++)o[`p${i}`]=new n({actionName:e,positionHandler:m(i),actionHandler:f(i),...r});return o}export{f as createPolyActionHandler,p as createPolyControls,m as createPolyPositionHandler,c as factoryPolyActionHandler,a as polyActionHandler};
//# sourceMappingURL=polyControl.min.mjs.map
