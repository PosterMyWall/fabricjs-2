{"version":3,"file":"Table.min.mjs","sources":["../../../src/shapes/Table.ts"],"sourcesContent":["//*PMW* class addded for tables\nimport { Group } from './Group';\nimport { classRegistry } from '../ClassRegistry';\nimport type { IText } from 'fabric';\n\nexport class Table extends Group {\n  /**\n   * Type of an object\n   * @type String\n   * @default\n   */\n  static type = 'table';\n\n  /**\n   * Number of table rows\n   * @type {Number}\n   */\n  rows = 0;\n  /**\n   * Number of table columns\n   * @type {Number}\n   */\n  columns = 0;\n  /**\n   * Layout style\n   * @type {String}\n   */\n  layoutType = '';\n  /**\n   * Background color 1 for alternate table background\n   * @type {String}\n   */\n  alternateBackgroundColor1 = null;\n  /**\n   * Background color 2 for alternate table background\n   * @type {String}\n   */\n  alternateBackgroundColor2 = null;\n  /**\n   * Background color for highlighted rows\n   * @type {String}\n   */\n  highlightedRowsBackgroundColor = null;\n  /**\n   * Array containing indices of highlighted rows\n   * @type {Array}\n   */\n  highlightedRows: Array<number> = [];\n  /**\n   * 2D array containing table data\n   * @type {Array}\n   */\n  tableArray: Array<Array<IText>> = [[]];\n  /**\n   * Spacing Between rows of table\n   * @type {Number}\n   */\n  ySpacing = 0;\n  /**\n   * Spacing Between column of table\n   * @type {Number}\n   */\n  xSpacing = 0;\n  /**\n   * Property used for showing the 'edit content' button\n   * @type {boolean}\n   */\n  hasButton = true;\n\n  /**\n   * Draws the table/schedule border\n   * @param {CanvasRenderingContext2D} ctx context to draw on\n   */\n  renderTableBorders(ctx: CanvasRenderingContext2D) {\n    if (!this.stroke || this.strokeWidth === 0) {\n      return;\n    }\n    ctx.save();\n    this._setStrokeStyles(ctx, this);\n    ctx.strokeRect(\n      -(this.width / 2),\n      -(this.height / 2),\n      this.width,\n      this.height\n    );\n\n    // if custom table layout them draw rows and column border too\n    if (this.isTableLayout()) {\n      this.drawColumnBorders(ctx);\n      this.drawRowBorders(ctx);\n    }\n    ctx.restore();\n  }\n\n  public isTable(): this is Table{\n    return true;\n  }\n\n  /**\n   * This function is responsible for rendering the background of table.\n   * It loops over all the rows in the table and draws the appropriate color rectangle for each row.\n   * If more then one consecutive rows have background of same color then it draws a one big rectangle of that color.\n   * @param {CanvasRenderingContext2D} ctx context to render on\n   */\n  renderTableCustomBackground(ctx: CanvasRenderingContext2D) {\n    if (\n      (this.highlightedRows.length == 0 &&\n        !(this.alternateBackgroundColor1 && this.alternateBackgroundColor2)) ||\n      !this.isTableLayout()\n    ) {\n      this.renderGroupBackground(ctx);\n      return;\n    }\n\n    const backgroundData = this.getTableBackGroundData();\n    ctx.save();\n    const objects = this.getObjects();\n    let top = null;\n    let height = null;\n    let renderBackground = false;\n\n    for (let i = 0; i < backgroundData.length; i++) {\n      renderBackground = false;\n      if (backgroundData[i] != 'none') {\n        if (top == null) {\n          if (i == 0) {\n            top = -this.height / 2;\n          } else {\n            top = objects[i].top - this.ySpacing / 2;\n          }\n        }\n\n        if (backgroundData[i] != backgroundData[i + 1]) {\n          // set height of rectangle to render\n          height =\n            Math.abs(top - objects[i].top) +\n            this.getHeightOfRow(i) +\n            this.ySpacing / 2;\n          renderBackground = true;\n\n          switch (backgroundData[i]) {\n            case 'highlight':\n              // @ts-ignore\n              ctx.fillStyle = this.highlightedRowsBackgroundColor;\n              break;\n            case 'color':\n              ctx.fillStyle = this.backgroundColor;\n              break;\n            case 'alternate1':\n              // @ts-ignore\n              ctx.fillStyle = this.alternateBackgroundColor1;\n              break;\n            case 'alternate2':\n              // @ts-ignore\n              ctx.fillStyle = this.alternateBackgroundColor2;\n              break;\n          }\n        } else {\n          renderBackground = false;\n        }\n\n        if (renderBackground) {\n          ctx.fillRect(-this.width / 2, top, this.width, height ?? 0);\n          top = null;\n          height = null;\n        }\n      }\n    }\n    ctx.restore();\n  }\n\n  /**\n   * Returns an array containing string values corresponding to rows background color.\n   * 'highlight' for selected rows\n   * 'color' for when colored background is selected by user\n   * 'alternate1' for even rows when alternate background is selected\n   * 'alternate2' for odd rows when alternate background is selected\n   * 'none' for transparent background\n   * @returns {Array}\n   */\n  getTableBackGroundData() {\n    const data = [];\n    for (let i = 0; i < this.rows; i++) {\n      if (this.highlightedRows.indexOf(i) != -1) {\n        data.push('highlight');\n      } else if (this.backgroundColor != null) {\n        data.push('color');\n      } else if (\n        this.alternateBackgroundColor1 &&\n        this.alternateBackgroundColor2\n      ) {\n        if (i % 2 == 0) {\n          data.push('alternate1');\n        } else {\n          data.push('alternate2');\n        }\n      } else {\n        data.push('none');\n      }\n    }\n    return data;\n  }\n\n  /**\n   * Returns the height of an item in a given row with max height,\n   * this value is basically the minimum space in y-axis needed by this row in a table.\n   * @param {Number} row\n   * @returns {Number}\n   */\n  getHeightOfRow(row: number) {\n    let height = 0,\n      h;\n    for (let i = 0; i < this.columns; i++) {\n      h = this.tableArray[i][row].calcTextHeight();\n      if (h > height) {\n        height = h;\n      }\n    }\n    return height;\n  }\n\n  /**\n   * Returns the width of an item in a given column with max width,\n   * this value is basically the minimum space in x-axis needed by this column in a table.\n   * @param {Number} column column index\n   * @returns {Number} minimum width required by this column\n   */\n  getWidthOfColumn(column: number) {\n    let width = 0,\n      w;\n    for (let i = 0; i < this.rows; i++) {\n      w = this.tableArray[column][i].calcTextWidth();\n      if (w > width) {\n        width = w;\n      }\n    }\n    return width;\n  }\n\n  /**\n   * renders border for table columns\n   * @param {CanvasRenderingContext2D} ctx context to render on\n   */\n  drawColumnBorders(ctx: CanvasRenderingContext2D) {\n    const objects = this.getObjects();\n    let x = this.rows,\n      maxWidth,\n      w,\n      itemIndex;\n    for (let i = 2; i <= this.columns; i++) {\n      maxWidth = 0;\n      // @ts-ignore\n      while (objects[x] && objects[x].column == i) {\n        w = objects[x].width;\n        if (w > maxWidth) {\n          maxWidth = w;\n          itemIndex = x;\n        }\n        x++;\n      }\n      if(itemIndex) {\n        ctx.beginPath();\n        ctx.moveTo(\n          objects[itemIndex].left - this.xSpacing / 2,\n          -(this.height / 2)\n        );\n        ctx.lineTo(\n          objects[itemIndex].left - this.xSpacing / 2,\n          -(this.height / 2) + this.height\n        );\n        ctx.stroke();\n      }\n    }\n  }\n\n  /**\n   * renders border for table rows\n   * @param {CanvasRenderingContext2D} ctx context to render on\n   */\n  drawRowBorders(ctx: CanvasRenderingContext2D) {\n    const objects = this.getObjects();\n    for (let i = 1; i < this.rows; i++) {\n      const startX = -this.width / 2,\n        startY = objects[i].top - this.ySpacing / 2,\n        endX = startX + this.width,\n        endY = startY;\n      ctx.beginPath();\n      ctx.moveTo(startX, startY);\n      ctx.lineTo(endX, endY);\n      ctx.stroke();\n    }\n  }\n\n  /**\n   * Returns true if design is simple table structure('custom-table' or 'layout-1'), false otherwise\n   * @returns {boolean}\n   */\n  isTableLayout() {\n    return this.layoutType == 'layout-1' || this.layoutType == 'custom-table';\n  }\n}\n\nclassRegistry.setClass(Table);\nclassRegistry.setClass(Table, 'table');\n"],"names":["Table","Group","constructor","super","arguments","_defineProperty","this","renderTableBorders","ctx","stroke","strokeWidth","save","_setStrokeStyles","strokeRect","width","height","isTableLayout","drawColumnBorders","drawRowBorders","restore","isTable","renderTableCustomBackground","highlightedRows","length","alternateBackgroundColor1","alternateBackgroundColor2","renderGroupBackground","backgroundData","getTableBackGroundData","objects","getObjects","top","renderBackground","i","ySpacing","Math","abs","getHeightOfRow","fillStyle","highlightedRowsBackgroundColor","backgroundColor","_height","fillRect","data","rows","indexOf","push","row","h","columns","tableArray","calcTextHeight","getWidthOfColumn","column","w","calcTextWidth","maxWidth","itemIndex","x","beginPath","moveTo","left","xSpacing","lineTo","startX","startY","endX","endY","layoutType","classRegistry","setClass"],"mappings":"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"}