{"version":3,"file":"Object.min.mjs","sources":["../../../../src/shapes/Object/Object.ts"],"sourcesContent":["import { cache } from '../../cache';\nimport { config } from '../../config';\nimport {\n  ALIASING_LIMIT,\n  CENTER,\n  iMatrix,\n  LEFT,\n  SCALE_X,\n  SCALE_Y,\n  STROKE,\n  FILL,\n  TOP,\n  VERSION,\n} from '../../constants';\nimport type { ObjectEvents } from '../../EventTypeDefs';\nimport type { XY } from '../../Point';\nimport { Point } from '../../Point';\nimport { Shadow } from '../../Shadow';\nimport type {\n  TDegree,\n  TFiller,\n  TSize,\n  TCacheCanvasDimensions,\n  Abortable,\n  TOptions,\n  ImageFormat,\n} from '../../typedefs';\nimport { classRegistry } from '../../ClassRegistry';\nimport { runningAnimations } from '../../util/animation/AnimationRegistry';\nimport { capValue } from '../../util/misc/capValue';\nimport { createCanvasElement, toDataURL } from '../../util/misc/dom';\nimport { invertTransform, qrDecompose } from '../../util/misc/matrix';\nimport { enlivenObjectEnlivables } from '../../util/misc/objectEnlive';\nimport {\n  resetObjectTransform,\n  saveObjectTransform,\n} from '../../util/misc/objectTransforms';\nimport { sendObjectToPlane } from '../../util/misc/planeChange';\nimport { pick, pickBy } from '../../util/misc/pick';\nimport { toFixed } from '../../util/misc/toFixed';\nimport type { Group } from '../Group';\nimport { StaticCanvas } from '../../canvas/StaticCanvas';\nimport {\n  isFiller,\n  isSerializableFiller,\n  isTextObject,\n} from '../../util/typeAssertions';\nimport type { FabricImage } from '../Image';\nimport {\n  cacheProperties,\n  fabricObjectDefaultValues,\n  stateProperties,\n} from './defaultValues';\nimport type { Gradient } from '../../gradient/Gradient';\nimport type { Pattern } from '../../Pattern';\nimport type { Canvas } from '../../canvas/Canvas';\nimport type { SerializedObjectProps } from './types/SerializedObjectProps';\nimport type { ObjectProps } from './types/ObjectProps';\nimport { getDevicePixelRatio, getEnv } from '../../env';\nimport { log } from '../../util/internals/console';\nimport type { TColorArg } from '../../color/typedefs';\nimport type { TAnimation } from '../../util/animation/animate';\nimport { animate, animateColor } from '../../util/animation/animate';\nimport type {\n  AnimationOptions,\n  ArrayAnimationOptions,\n  ColorAnimationOptions,\n  ValueAnimationOptions,\n} from '../../util/animation/types';\nimport { ObjectGeometry } from './ObjectGeometry';\n\ntype TAncestor = FabricObject;\ntype TCollection = Group;\n\nexport type Ancestors =\n  | [FabricObject | Group]\n  | [FabricObject | Group, ...Group[]]\n  | Group[];\n\nexport type AncestryComparison = {\n  /**\n   * common ancestors of `this` and`other`(may include`this` | `other`)\n   */\n  common: Ancestors;\n  /**\n   * ancestors that are of `this` only\n   */\n  fork: Ancestors;\n  /**\n   * ancestors that are of `other` only\n   */\n  otherFork: Ancestors;\n};\nimport { degreesToRadians } from '../../util/misc/radiansDegreesConversion';\n\nexport type TCachedFabricObject<T extends FabricObject = FabricObject> = T &\n  Required<\n    Pick<\n      T,\n      | 'zoomX'\n      | 'zoomY'\n      | '_cacheCanvas'\n      | '_cacheContext'\n      | 'cacheTranslationX'\n      | 'cacheTranslationY'\n    >\n  > & {\n    _cacheContext: CanvasRenderingContext2D;\n  };\n\nexport type ObjectToCanvasElementOptions = {\n  format?: ImageFormat;\n  /** Multiplier to scale by */\n  multiplier?: number;\n  /** Cropping left offset. Introduced in v1.2.14 */\n  left?: number;\n  /** Cropping top offset. Introduced in v1.2.14 */\n  top?: number;\n  /** Cropping width. Introduced in v1.2.14 */\n  width?: number;\n  /** Cropping height. Introduced in v1.2.14 */\n  height?: number;\n  /** Enable retina scaling for clone image. Introduce in 1.6.4 */\n  enableRetinaScaling?: boolean;\n  /** Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4 */\n  withoutTransform?: boolean;\n  /** Remove current object shadow. Introduced in 2.4.2 */\n  withoutShadow?: boolean;\n  /** Account for canvas viewport transform */\n  viewportTransform?: boolean;\n  expandBoundingBoxByFont?: boolean;\n  /** Function to create the output canvas to export onto */\n  canvasProvider?: <T extends StaticCanvas>(el?: HTMLCanvasElement) => T;\n};\n\ntype toDataURLOptions = ObjectToCanvasElementOptions & {\n  quality?: number;\n};\n\ninterface GetCornerPointsResponse {\n  tl: Point;\n  tr: Point;\n  bl: Point;\n  br: Point;\n}\n\n/**\n * Root object class from which all 2d shape classes inherit from\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#objects}\n *\n * @fires added\n * @fires removed\n *\n * @fires selected\n * @fires deselected\n *\n * @fires rotating\n * @fires scaling\n * @fires moving\n * @fires skewing\n * @fires modified\n *\n * @fires mousedown\n * @fires mouseup\n * @fires mouseover\n * @fires mouseout\n * @fires mousewheel\n * @fires mousedblclick\n *\n * @fires dragover\n * @fires dragenter\n * @fires dragleave\n * @fires drop\n */\nexport class FabricObject<\n    Props extends TOptions<ObjectProps> = Partial<ObjectProps>,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    SProps extends SerializedObjectProps = SerializedObjectProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends ObjectGeometry<EventSpec>\n  implements ObjectProps\n{\n  declare minScaleLimit: number;\n\n  declare opacity: number;\n  declare __PMWTESTPROPERTY: string;\n  declare __PMWID: string;\n  declare erasable: boolean | 'deep';\n  declare bindedObjectPmwId: string;\n\n  declare paintFirst: 'fill' | 'stroke';\n  declare fill: string | TFiller | null;\n  declare fillRule: CanvasFillRule;\n  declare stroke: string | TFiller | null;\n  declare strokeDashArray: number[] | null;\n  declare strokeDashOffset: number;\n  declare strokeLineCap: CanvasLineCap;\n  declare strokeLineJoin: CanvasLineJoin;\n  declare strokeMiterLimit: number;\n\n  declare globalCompositeOperation: GlobalCompositeOperation;\n  declare backgroundColor: string;\n\n  /**\n   * *PMW property added*\n   * Whether to render a rectangle background or a tilted background\n   */\n  declare leanBackground: boolean;\n\n  /**\n   * *PMW property added*\n   * Leanness of background\n   */\n  declare leanBackgroundOffset: number;\n\n  declare shadow: Shadow | null;\n\n  declare visible: boolean;\n\n  declare includeDefaultValues: boolean;\n  declare excludeFromExport: boolean;\n\n  declare objectCaching: boolean;\n\n  declare clipPath?: FabricObject;\n  declare inverted: boolean;\n  declare absolutePositioned: boolean;\n  declare centeredRotation: boolean;\n  declare centeredScaling: boolean;\n\n  /**\n   * *PMW* new property\n   * PosterMyWall property for the default text of the button.\n   * @default\n   */\n  declare pmwBmBtnText: string;\n\n  /**\n   * *PMW* new property\n   * An svg of the icon place in the pmw bottom-middle button\n   * @default\n   */\n  declare pmwBmBtnIcon: string;\n\n  /**\n   * This list of properties is used to check if the state of an object is changed.\n   * This state change now is only used for children of groups to understand if a group\n   * needs its cache regenerated during a .set call\n   * @type Array\n   */\n  static stateProperties: string[] = stateProperties;\n\n  /**\n   * List of properties to consider when checking if cache needs refresh\n   * Those properties are checked by\n   * calls to Object.set(key, value). If the key is in this list, the object is marked as dirty\n   * and refreshed at the next render\n   * @type Array\n   */\n  static cacheProperties: string[] = cacheProperties;\n\n  /**\n   * When set to `true`, object's cache will be rerendered next render call.\n   * since 1.7.0\n   * @type Boolean\n   * @default true\n   */\n  declare dirty: boolean;\n\n  /**\n   * Quick access for the _cacheCanvas rendering context\n   * This is part of the objectCaching feature\n   * since 1.7.0\n   * @type boolean\n   * @default undefined\n   * @private\n   */\n  _cacheContext: CanvasRenderingContext2D | null = null;\n\n  /**\n   * A reference to the HTMLCanvasElement that is used to contain the cache of the object\n   * this canvas element is resized and cleared as needed\n   * Is marked private, you can read it, don't use it since it is handled by fabric\n   * since 1.7.0\n   * @type HTMLCanvasElement\n   * @default undefined\n   * @private\n   */\n  declare _cacheCanvas?: HTMLCanvasElement;\n\n  /**\n   * zoom level used on the cacheCanvas to draw the cache, X axe\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare zoomX?: number;\n\n  /**\n   * zoom level used on the cacheCanvas to draw the cache, Y axe\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare zoomY?: number;\n\n  /**\n   * zoom level used on the cacheCanvas to draw the cache, Y axe\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare cacheTranslationX?: number;\n\n  /**\n   * translation of the cacheCanvas away from the center, for subpixel accuracy and crispness\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare cacheTranslationY?: number;\n\n  /**\n   * A reference to the parent of the object, usually a Group\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare group?: Group;\n\n  /**\n   * Indicate if the object is sitting on a cache dedicated to it\n   * or is part of a larger cache for many object ( a group for example)\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare ownCaching?: boolean;\n\n  /**\n   * Private. indicates if the object inside a group is on a transformed context or not\n   * or is part of a larger cache for many object ( a group for example)\n   * @type boolean\n   * @default undefined\n   * @private\n   */\n  declare _transformDone?: boolean;\n\n  static ownDefaults = fabricObjectDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return FabricObject.ownDefaults;\n  }\n\n  /**\n   * The class type.\n   * This is used for serialization and deserialization purposes and internally it can be used\n   * to identify classes.\n   * When we transform a class in a plain JS object we need a way to recognize which class it was,\n   * and the type is the way we do that. It has no other purposes and you should not give one.\n   * Hard to reach on instances and please do not use to drive instance's logic (this.constructor.type).\n   * To idenfity a class use instanceof class ( instanceof Rect ).\n   * We do not do that in fabricJS code because we want to try to have code splitting possible.\n   */\n  static type = 'FabricObject';\n\n  /**\n   * Legacy identifier of the class. Prefer using utils like isType or instanceOf\n   * Will be removed in fabric 7 or 8.\n   * The setter exists to avoid type errors in old code and possibly current deserialization code.\n   * @TODO add sustainable warning message\n   * @type string\n   * @deprecated\n   */\n  get type() {\n    const name = (this.constructor as typeof FabricObject).type;\n    if (name === 'FabricObject') {\n      return 'object';\n    }\n    return name.toLowerCase();\n  }\n\n  set type(value) {\n    log('warn', 'Setting type has no effect', value);\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, FabricObject.ownDefaults);\n    this.setOptions(options);\n  }\n\n  /**\n   * Create a the canvas used to keep the cached copy of the object\n   * @private\n   */\n  _createCacheCanvas() {\n    this._cacheCanvas = createCanvasElement();\n    this._cacheContext = this._cacheCanvas.getContext('2d');\n    this._updateCacheCanvas();\n    // if canvas gets created, is empty, so dirty.\n    this.dirty = true;\n  }\n\n  /**\n   * Limit the cache dimensions so that X * Y do not cross config.perfLimitSizeTotal\n   * and each side do not cross fabric.cacheSideLimit\n   * those numbers are configurable so that you can get as much detail as you want\n   * making bargain with performances.\n   * @param {Object} dims\n   * @param {Object} dims.width width of canvas\n   * @param {Object} dims.height height of canvas\n   * @param {Object} dims.zoomX zoomX zoom value to unscale the canvas before drawing cache\n   * @param {Object} dims.zoomY zoomY zoom value to unscale the canvas before drawing cache\n   * @return {Object}.width width of canvas\n   * @return {Object}.height height of canvas\n   * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n   * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n   */\n  _limitCacheSize(\n    dims: TSize & { zoomX: number; zoomY: number; capped: boolean } & any,\n  ) {\n    const width = dims.width,\n      height = dims.height,\n      max = config.maxCacheSideLimit,\n      min = config.minCacheSideLimit;\n    if (\n      width <= max &&\n      height <= max &&\n      width * height <= config.perfLimitSizeTotal\n    ) {\n      if (width < min) {\n        dims.width = min;\n      }\n      if (height < min) {\n        dims.height = min;\n      }\n      return dims;\n    }\n    const ar = width / height,\n      [limX, limY] = cache.limitDimsByArea(ar),\n      x = capValue(min, limX, max),\n      y = capValue(min, limY, max);\n    if (width > x) {\n      dims.zoomX /= width / x;\n      dims.width = x;\n      dims.capped = true;\n    }\n    if (height > y) {\n      dims.zoomY /= height / y;\n      dims.height = y;\n      dims.capped = true;\n    }\n    return dims;\n  }\n\n  /**\n   * Return the dimension and the zoom level needed to create a cache canvas\n   * big enough to host the object to be cached.\n   * @private\n   * @return {Object}.x width of object to be cached\n   * @return {Object}.y height of object to be cached\n   * @return {Object}.width width of canvas\n   * @return {Object}.height height of canvas\n   * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n   * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n   */\n  _getCacheCanvasDimensions(): TCacheCanvasDimensions {\n    const objectScale = this.getTotalObjectScaling(),\n      // calculate dimensions without skewing\n      dim = this._getTransformedDimensions({ skewX: 0, skewY: 0 }),\n      neededX = (dim.x * objectScale.x) / this.scaleX,\n      neededY = (dim.y * objectScale.y) / this.scaleY;\n    return {\n      // for sure this ALIASING_LIMIT is slightly creating problem\n      // in situation in which the cache canvas gets an upper limit\n      // also objectScale contains already scaleX and scaleY\n      width: neededX + ALIASING_LIMIT,\n      height: neededY + ALIASING_LIMIT,\n      zoomX: objectScale.x,\n      zoomY: objectScale.y,\n      x: neededX,\n      y: neededY,\n    };\n  }\n\n  eqqwe() {\n\n  }\n  eqqwe2() {\n\n  }\n  /**\n   * Update width and height of the canvas for cache\n   * returns true or false if canvas needed resize.\n   * @private\n   * @return {Boolean} true if the canvas has been resized\n   */\n  _updateCacheCanvas() {\n    const canvas = this._cacheCanvas!,\n      context = this._cacheContext,\n      dims = this._limitCacheSize(this._getCacheCanvasDimensions()),\n      minCacheSize = config.minCacheSideLimit,\n      width = dims.width,\n      height = dims.height,\n      zoomX = dims.zoomX,\n      zoomY = dims.zoomY,\n      dimensionsChanged = width !== canvas.width || height !== canvas.height,\n      zoomChanged = this.zoomX !== zoomX || this.zoomY !== zoomY;\n\n    if (!canvas || !context) {\n      return false;\n    }\n\n    let drawingWidth,\n      drawingHeight,\n      shouldRedraw = dimensionsChanged || zoomChanged,\n      additionalWidth = 0,\n      additionalHeight = 0,\n      shouldResizeCanvas = false;\n\n    if (dimensionsChanged) {\n      const canvasWidth = (this._cacheCanvas as HTMLCanvasElement).width,\n        canvasHeight = (this._cacheCanvas as HTMLCanvasElement).height,\n        sizeGrowing = width > canvasWidth || height > canvasHeight,\n        sizeShrinking =\n          (width < canvasWidth * 0.9 || height < canvasHeight * 0.9) &&\n          canvasWidth > minCacheSize &&\n          canvasHeight > minCacheSize;\n      shouldResizeCanvas = sizeGrowing || sizeShrinking;\n      if (\n        sizeGrowing &&\n        !dims.capped &&\n        (width > minCacheSize || height > minCacheSize)\n      ) {\n        additionalWidth = width * 0.1;\n        additionalHeight = height * 0.1;\n      }\n    }\n    if (isTextObject(this) && this.path) {\n      shouldRedraw = true;\n      shouldResizeCanvas = true;\n      // IMHO in those lines we are using zoomX and zoomY not the this version.\n      additionalWidth += this.getHeightOfLine(0) * this.zoomX!;\n      additionalHeight += this.getHeightOfLine(0) * this.zoomY!;\n    }\n    if (shouldRedraw) {\n      if (shouldResizeCanvas) {\n        canvas.width = Math.ceil(width + additionalWidth);\n        canvas.height = Math.ceil(height + additionalHeight);\n      } else {\n        context.setTransform(1, 0, 0, 1, 0, 0);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n      }\n      drawingWidth = dims.x / 2;\n      drawingHeight = dims.y / 2;\n      this.cacheTranslationX =\n        Math.round(canvas.width / 2 - drawingWidth) + drawingWidth;\n      this.cacheTranslationY =\n        Math.round(canvas.height / 2 - drawingHeight) + drawingHeight;\n      context.translate(this.cacheTranslationX, this.cacheTranslationY);\n      context.scale(zoomX, zoomY);\n      this.zoomX = zoomX;\n      this.zoomY = zoomY;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Sets object's properties from options, for class constructor only.\n   * Needs to be overridden for different defaults.\n   * @protected\n   * @param {Object} [options] Options object\n   */\n  protected setOptions(options: Record<string, any> = {}) {\n    this._setOptions(options);\n  }\n\n  /**\n   * Transforms context when rendering an object\n   * @param {CanvasRenderingContext2D} ctx Context\n   */\n  transform(ctx: CanvasRenderingContext2D) {\n    const needFullTransform =\n      (this.group && !this.group._transformDone) ||\n      (this.group && this.canvas && ctx === (this.canvas as Canvas).contextTop);\n    const m = this.calcTransformMatrix(!needFullTransform);\n    ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n  }\n\n  /**\n   * Return the object scale factor counting also the group scaling\n   * @return {Point}\n   */\n  getObjectScaling() {\n    // if the object is a top level one, on the canvas, we go for simple aritmetic\n    // otherwise the complex method with angles will return approximations and decimals\n    // and will likely kill the cache when not needed\n    // https://github.com/fabricjs/fabric.js/issues/7157\n    if (!this.group) {\n      return new Point(Math.abs(this.scaleX), Math.abs(this.scaleY));\n    }\n    // if we are inside a group total zoom calculation is complex, we defer to generic matrices\n    const options = qrDecompose(this.calcTransformMatrix());\n    return new Point(Math.abs(options.scaleX), Math.abs(options.scaleY));\n  }\n\n  /**\n   * Return the object scale factor counting also the group scaling, zoom and retina\n   * @return {Object} object with scaleX and scaleY properties\n   */\n  getTotalObjectScaling() {\n    const scale = this.getObjectScaling();\n    if (this.canvas) {\n      const zoom = this.canvas.getZoom();\n      const retina = this.getCanvasRetinaScaling();\n      return scale.scalarMultiply(zoom * retina);\n    }\n    return scale;\n  }\n\n  /**\n   * Return the object opacity counting also the group property\n   * @return {Number}\n   */\n  getObjectOpacity() {\n    let opacity = this.opacity;\n    if (this.group) {\n      opacity *= this.group.getObjectOpacity();\n    }\n    return opacity;\n  }\n\n  /**\n   * Makes sure the scale is valid and modifies it if necessary\n   * @todo: this is a control action issue, not a geometry one\n   * @private\n   * @param {Number} value, unconstrained\n   * @return {Number} constrained value;\n   */\n  _constrainScale(value: number): number {\n    if (Math.abs(value) < this.minScaleLimit) {\n      if (value < 0) {\n        return -this.minScaleLimit;\n      } else {\n        return this.minScaleLimit;\n      }\n    } else if (value === 0) {\n      return 0.0001;\n    }\n    return value;\n  }\n\n  /**\n   * Handles setting values on the instance and handling internal side effects\n   * @protected\n   * @param {String} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    if (key === SCALE_X || key === SCALE_Y) {\n      value = this._constrainScale(value);\n    }\n    if (key === SCALE_X && value < 0) {\n      this.flipX = !this.flipX;\n      value *= -1;\n    } else if (key === 'scaleY' && value < 0) {\n      this.flipY = !this.flipY;\n      value *= -1;\n      // i don't like this automatic initialization here\n    } else if (key === 'shadow' && value && !(value instanceof Shadow)) {\n      value = new Shadow(value);\n    }\n\n    const isChanged = this[key as keyof this] !== value;\n    this[key as keyof this] = value;\n\n    // invalidate caches\n    if (\n      isChanged &&\n      (this.constructor as typeof FabricObject).cacheProperties.includes(key)\n    ) {\n      this.dirty = true;\n    }\n    // a dirty child makes the parent dirty.\n    // but a non dirty child does not make the parent not dirty.\n    // the parent could be dirty for some other reason.\n    this.parent &&\n      (this.dirty ||\n        (isChanged &&\n          (this.constructor as typeof FabricObject).stateProperties.includes(\n            key,\n          ))) &&\n      this.parent._set('dirty', true);\n\n    return this;\n  }\n\n  /*\n   * @private\n   * return if the object would be visible in rendering\n   * @memberOf FabricObject.prototype\n   * @return {Boolean}\n   */\n  isNotVisible() {\n    return (\n      this.opacity === 0 ||\n      (!this.width && !this.height && this.strokeWidth === 0) ||\n      !this.visible\n    );\n  }\n\n  /**\n   * Renders an object on a specified context\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  render(ctx: CanvasRenderingContext2D) {\n    // do not render if width/height are zeros or object is not visible\n    if (this.isNotVisible()) {\n      return;\n    }\n    if (\n      this.canvas &&\n      this.canvas.skipOffscreen &&\n      !this.group &&\n      !this.isOnScreen()\n    ) {\n      return;\n    }\n    ctx.save();\n    this._setupCompositeOperation(ctx);\n    this.drawSelectionBackground(ctx);\n    this.transform(ctx);\n    this._setOpacity(ctx);\n    this._setShadow(ctx);\n    if (this.shouldCache()) {\n      this.renderCache();\n      (this as TCachedFabricObject).drawCacheOnCanvas(ctx);\n    } else {\n      this._removeCacheCanvas();\n      this.drawObject(ctx);\n      this.dirty = false;\n    }\n    ctx.restore();\n  }\n\n  drawSelectionBackground(_ctx: CanvasRenderingContext2D) {\n    /* no op */\n  }\n\n  renderCache(options?: any) {\n    options = options || {};\n    if (!this._cacheCanvas || !this._cacheContext) {\n      this._createCacheCanvas();\n    }\n    if (this.isCacheDirty() && this._cacheContext) {\n      this.drawObject(this._cacheContext, options.forClipping);\n      this.dirty = false;\n    }\n  }\n\n  /**\n   * Remove cacheCanvas and its dimensions from the objects\n   */\n  _removeCacheCanvas() {\n    this._cacheCanvas = undefined;\n    this._cacheContext = null;\n  }\n\n  /**\n   * return true if the object will draw a stroke\n   * Does not consider text styles. This is just a shortcut used at rendering time\n   * We want it to be an approximation and be fast.\n   * wrote to avoid extra caching, it has to return true when stroke happens,\n   * can guess when it will not happen at 100% chance, does not matter if it misses\n   * some use case where the stroke is invisible.\n   * @since 3.0.0\n   * @returns Boolean\n   */\n  hasStroke() {\n    return (\n      this.stroke && this.stroke !== 'transparent' && this.strokeWidth !== 0\n    );\n  }\n\n  /**\n   * return true if the object will draw a fill\n   * Does not consider text styles. This is just a shortcut used at rendering time\n   * We want it to be an approximation and be fast.\n   * wrote to avoid extra caching, it has to return true when fill happens,\n   * can guess when it will not happen at 100% chance, does not matter if it misses\n   * some use case where the fill is invisible.\n   * @since 3.0.0\n   * @returns Boolean\n   */\n  hasFill() {\n    return this.fill && this.fill !== 'transparent';\n  }\n\n  /**\n   * When set to `true`, force the object to have its own cache, even if it is inside a group\n   * it may be needed when your object behave in a particular way on the cache and always needs\n   * its own isolated canvas to render correctly.\n   * Created to be overridden\n   * since 1.7.12\n   * @returns Boolean\n   */\n  needsItsOwnCache() {\n    if (\n      this.paintFirst === STROKE &&\n      this.hasFill() &&\n      this.hasStroke() &&\n      !!this.shadow\n    ) {\n      return true;\n    }\n    if (this.clipPath) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Decide if the object should cache or not. Create its own cache level\n   * objectCaching is a global flag, wins over everything\n   * needsItsOwnCache should be used when the object drawing method requires\n   * a cache step. None of the fabric classes requires it.\n   * Generally you do not cache objects in groups because the group outside is cached.\n   * Read as: cache if is needed, or if the feature is enabled but we are not already caching.\n   * @return {Boolean}\n   */\n  shouldCache() {\n    this.ownCaching =\n      this.needsItsOwnCache() ||\n      (this.objectCaching && (!this.parent || !this.parent.isOnACache()));\n    return this.ownCaching;\n  }\n\n  /**\n   * Check if this object will cast a shadow with an offset.\n   * used by Group.shouldCache to know if child has a shadow recursively\n   * @return {Boolean}\n   * @deprecated\n   */\n  willDrawShadow() {\n    return (\n      !!this.shadow && (this.shadow.offsetX !== 0 || this.shadow.offsetY !== 0)\n    );\n  }\n\n  /**\n   * Execute the drawing operation for an object clipPath\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {FabricObject} clipPath\n   */\n  drawClipPathOnCache(\n    ctx: CanvasRenderingContext2D,\n    clipPath: TCachedFabricObject,\n  ) {\n    ctx.save();\n    // DEBUG: uncomment this line, comment the following\n    // ctx.globalAlpha = 0.4\n    if (clipPath.inverted) {\n      ctx.globalCompositeOperation = 'destination-out';\n    } else {\n      ctx.globalCompositeOperation = 'destination-in';\n    }\n    //ctx.scale(1 / 2, 1 / 2);\n    if (clipPath.absolutePositioned) {\n      const m = invertTransform(this.calcTransformMatrix());\n      ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n    }\n    clipPath.transform(ctx);\n    ctx.scale(1 / clipPath.zoomX, 1 / clipPath.zoomY);\n    ctx.drawImage(\n      clipPath._cacheCanvas,\n      -clipPath.cacheTranslationX,\n      -clipPath.cacheTranslationY,\n    );\n    ctx.restore();\n  }\n\n  /**\n   * Execute the drawing operation for an object on a specified context\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {boolean} forClipping apply clipping styles\n   */\n  drawObject(ctx: CanvasRenderingContext2D, forClipping?: boolean) {\n    const originalFill = this.fill,\n      originalStroke = this.stroke;\n    if (forClipping) {\n      this.fill = 'black';\n      this.stroke = '';\n      this._setClippingProperties(ctx);\n    } else {\n      this._renderBackground(ctx);\n    }\n    this._render(ctx);\n    this._drawClipPath(ctx, this.clipPath);\n    this.fill = originalFill;\n    this.stroke = originalStroke;\n  }\n\n  /**\n   * Prepare clipPath state and cache and draw it on instance's cache\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {FabricObject} clipPath\n   */\n  _drawClipPath(ctx: CanvasRenderingContext2D, clipPath?: FabricObject) {\n    if (!clipPath) {\n      return;\n    }\n    // needed to setup a couple of variables\n    // path canvas gets overridden with this one.\n    // TODO find a better solution?\n    clipPath._set('canvas', this.canvas);\n    clipPath.shouldCache();\n    clipPath._transformDone = true;\n    clipPath.renderCache({ forClipping: true });\n    this.drawClipPathOnCache(ctx, clipPath as TCachedFabricObject);\n  }\n\n  /**\n   * Paint the cached copy of the object on the target context.\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  drawCacheOnCanvas(this: TCachedFabricObject, ctx: CanvasRenderingContext2D) {\n    ctx.scale(1 / this.zoomX, 1 / this.zoomY);\n    ctx.drawImage(\n      this._cacheCanvas,\n      -this.cacheTranslationX,\n      -this.cacheTranslationY,\n    );\n  }\n\n  /**\n   * Check if cache is dirty\n   * @param {Boolean} skipCanvas skip canvas checks because this object is painted\n   * on parent canvas.\n   */\n  isCacheDirty(skipCanvas = false) {\n    if (this.isNotVisible()) {\n      return false;\n    }\n    const canvas = this._cacheCanvas;\n    const ctx = this._cacheContext;\n    if (canvas && ctx && !skipCanvas && this._updateCacheCanvas()) {\n      // in this case the context is already cleared.\n      return true;\n    } else {\n      if (this.dirty || (this.clipPath && this.clipPath.absolutePositioned)) {\n        if (canvas && ctx && !skipCanvas) {\n          ctx.save();\n          ctx.setTransform(1, 0, 0, 1, 0, 0);\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          ctx.restore();\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Draws a background for the object big as its untransformed dimensions\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderBackground(ctx: CanvasRenderingContext2D) {\n    if (!this.backgroundColor) {\n      return;\n    }\n    if (this.leanBackground) {\n      ctx.save();\n      ctx.fillStyle = this.backgroundColor;\n      ctx.beginPath();\n      const offset = this.leanBackgroundOffset / 4,\n        slant = this.leanBackgroundOffset / 2,\n        yFix = this.leanBackgroundOffset / 10;\n      ctx.moveTo(-this.width / 2 + offset, -this.height / 2 - yFix);\n      ctx.lineTo(\n        -this.width / 2 + this.width + offset,\n        -this.height / 2 - yFix\n      );\n      ctx.lineTo(\n        -this.width / 2 + this.width - slant + offset,\n        -this.height / 2 + this.height - yFix\n      );\n      ctx.lineTo(\n        -this.width / 2 - slant + offset,\n        -this.height / 2 + this.height - yFix\n      );\n      ctx.closePath();\n      ctx.fill();\n      ctx.restore();\n    }else {\n      const dim = this._getNonTransformedDimensions();\n      ctx.fillStyle = this.backgroundColor;\n\n      ctx.fillRect(-dim.x / 2, -dim.y / 2, dim.x, dim.y);\n    }\n    // if there is background color no other shadows\n    // should be casted\n    this._removeShadow(ctx);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _setOpacity(ctx: CanvasRenderingContext2D) {\n    if (this.group && !this.group._transformDone) {\n      ctx.globalAlpha = this.getObjectOpacity();\n    } else {\n      ctx.globalAlpha *= this.opacity;\n    }\n  }\n\n  _setStrokeStyles(\n    ctx: CanvasRenderingContext2D,\n    decl: Pick<\n      this,\n      | 'stroke'\n      | 'strokeWidth'\n      | 'strokeLineCap'\n      | 'strokeDashOffset'\n      | 'strokeLineJoin'\n      | 'strokeMiterLimit'\n    >,\n  ) {\n    const stroke = decl.stroke;\n    if (stroke) {\n      ctx.lineWidth = decl.strokeWidth;\n      ctx.lineCap = decl.strokeLineCap;\n      ctx.lineDashOffset = decl.strokeDashOffset;\n      ctx.lineJoin = decl.strokeLineJoin;\n      ctx.miterLimit = decl.strokeMiterLimit;\n      if (isFiller(stroke)) {\n        if (\n          (stroke as Gradient<'linear'>).gradientUnits === 'percentage' ||\n          (stroke as Gradient<'linear'>).gradientTransform ||\n          (stroke as Pattern).patternTransform\n        ) {\n          // need to transform gradient in a pattern.\n          // this is a slow process. If you are hitting this codepath, and the object\n          // is not using caching, you should consider switching it on.\n          // we need a canvas as big as the current object caching canvas.\n          this._applyPatternForTransformedGradient(ctx, stroke);\n        } else {\n          // is a simple gradient or pattern\n          ctx.strokeStyle = stroke.toLive(ctx)!;\n          this._applyPatternGradientTransform(ctx, stroke);\n        }\n      } else {\n        // is a color\n        ctx.strokeStyle = decl.stroke as string;\n      }\n    }\n  }\n\n  _setFillStyles(ctx: CanvasRenderingContext2D, { fill }: Pick<this, 'fill'>) {\n    if (fill) {\n      if (isFiller(fill)) {\n        ctx.fillStyle = fill.toLive(ctx)!;\n        this._applyPatternGradientTransform(ctx, fill);\n      } else {\n        ctx.fillStyle = fill;\n      }\n    }\n  }\n\n  _setClippingProperties(ctx: CanvasRenderingContext2D) {\n    ctx.globalAlpha = 1;\n    ctx.strokeStyle = 'transparent';\n    ctx.fillStyle = '#000000';\n  }\n\n  /**\n   * @private\n   * Sets line dash\n   * @param {CanvasRenderingContext2D} ctx Context to set the dash line on\n   * @param {Array} dashArray array representing dashes\n   */\n  _setLineDash(ctx: CanvasRenderingContext2D, dashArray?: number[] | null) {\n    if (!dashArray || dashArray.length === 0) {\n      return;\n    }\n    // Spec requires the concatenation of two copies of the dash array when the number of elements is odd\n    if (1 & dashArray.length) {\n      dashArray.push(...dashArray);\n    }\n    ctx.setLineDash(dashArray);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _setShadow(ctx: CanvasRenderingContext2D) {\n    if (!this.shadow) {\n      return;\n    }\n\n    const shadow = this.shadow,\n      canvas = this.canvas,\n      retinaScaling = this.getCanvasRetinaScaling(),\n      [sx, , , sy] = canvas?.viewportTransform || iMatrix,\n      multX = sx * retinaScaling,\n      multY = sy * retinaScaling,\n      scaling = shadow.nonScaling ? new Point(1, 1) : this.getObjectScaling();\n    ctx.shadowColor = shadow.color;\n    ctx.shadowBlur =\n      (shadow.blur *\n        config.browserShadowBlurConstant *\n        (multX + multY) *\n        (scaling.x + scaling.y)) /\n      4;\n    ctx.shadowOffsetX = shadow.offsetX * multX * scaling.x;\n    ctx.shadowOffsetY = shadow.offsetY * multY * scaling.y;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _removeShadow(ctx: CanvasRenderingContext2D) {\n    if (!this.shadow) {\n      return;\n    }\n\n    ctx.shadowColor = '';\n    ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {TFiller} filler {@link Pattern} or {@link Gradient}\n   */\n  _applyPatternGradientTransform(\n    ctx: CanvasRenderingContext2D,\n    filler: TFiller,\n  ) {\n    if (!isFiller(filler)) {\n      return { offsetX: 0, offsetY: 0 };\n    }\n    const t =\n      (filler as Gradient<'linear'>).gradientTransform ||\n      (filler as Pattern).patternTransform;\n    const offsetX = -this.width / 2 + filler.offsetX || 0,\n      offsetY = -this.height / 2 + filler.offsetY || 0;\n\n    if ((filler as Gradient<'linear'>).gradientUnits === 'percentage') {\n      ctx.transform(this.width, 0, 0, this.height, offsetX, offsetY);\n    } else {\n      ctx.transform(1, 0, 0, 1, offsetX, offsetY);\n    }\n    if (t) {\n      ctx.transform(t[0], t[1], t[2], t[3], t[4], t[5]);\n    }\n    return { offsetX: offsetX, offsetY: offsetY };\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderPaintInOrder(ctx: CanvasRenderingContext2D) {\n    if (this.paintFirst === STROKE) {\n      this._renderStroke(ctx);\n      this._renderFill(ctx);\n    } else {\n      this._renderFill(ctx);\n      this._renderStroke(ctx);\n    }\n  }\n\n  /**\n   * @private\n   * function that actually render something on the context.\n   * empty here to allow Obects to work on tests to benchmark fabric functionalites\n   * not related to rendering\n   * @param {CanvasRenderingContext2D} _ctx Context to render on\n   */\n  _render(_ctx: CanvasRenderingContext2D) {\n    // placeholder to be overridden\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderFill(ctx: CanvasRenderingContext2D) {\n    if (!this.fill) {\n      return;\n    }\n\n    ctx.save();\n    this._setFillStyles(ctx, this);\n    if (this.fillRule === 'evenodd') {\n      ctx.fill('evenodd');\n    } else {\n      ctx.fill();\n    }\n    ctx.restore();\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderStroke(ctx: CanvasRenderingContext2D) {\n    if (!this.stroke || this.strokeWidth === 0) {\n      return;\n    }\n\n    if (this.shadow && !this.shadow.affectStroke) {\n      this._removeShadow(ctx);\n    }\n\n    ctx.save();\n    if (this.strokeUniform) {\n      const scaling = this.getObjectScaling();\n      ctx.scale(1 / scaling.x, 1 / scaling.y);\n    }\n    this._setLineDash(ctx, this.strokeDashArray);\n    this._setStrokeStyles(ctx, this);\n    ctx.stroke();\n    ctx.restore();\n  }\n\n  /**\n   * This function try to patch the missing gradientTransform on canvas gradients.\n   * transforming a context to transform the gradient, is going to transform the stroke too.\n   * we want to transform the gradient but not the stroke operation, so we create\n   * a transformed gradient on a pattern and then we use the pattern instead of the gradient.\n   * this method has drawbacks: is slow, is in low resolution, needs a patch for when the size\n   * is limited.\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Gradient} filler\n   */\n  _applyPatternForTransformedGradient(\n    ctx: CanvasRenderingContext2D,\n    filler: TFiller,\n  ) {\n    const dims = this._limitCacheSize(this._getCacheCanvasDimensions()),\n      pCanvas = createCanvasElement(),\n      retinaScaling = this.getCanvasRetinaScaling(),\n      width = dims.x / this.scaleX / retinaScaling,\n      height = dims.y / this.scaleY / retinaScaling;\n    // in case width and height are less than 1px, we have to round up.\n    // since the pattern is no-repeat, this is fine\n    pCanvas.width = Math.ceil(width);\n    pCanvas.height = Math.ceil(height);\n    const pCtx = pCanvas.getContext('2d');\n    if (!pCtx) {\n      return;\n    }\n    pCtx.beginPath();\n    pCtx.moveTo(0, 0);\n    pCtx.lineTo(width, 0);\n    pCtx.lineTo(width, height);\n    pCtx.lineTo(0, height);\n    pCtx.closePath();\n    pCtx.translate(width / 2, height / 2);\n    pCtx.scale(\n      dims.zoomX / this.scaleX / retinaScaling,\n      dims.zoomY / this.scaleY / retinaScaling,\n    );\n    this._applyPatternGradientTransform(pCtx, filler);\n    pCtx.fillStyle = filler.toLive(ctx)!;\n    pCtx.fill();\n    ctx.translate(\n      -this.width / 2 - this.strokeWidth / 2,\n      -this.height / 2 - this.strokeWidth / 2,\n    );\n    ctx.scale(\n      (retinaScaling * this.scaleX) / dims.zoomX,\n      (retinaScaling * this.scaleY) / dims.zoomY,\n    );\n    ctx.strokeStyle = pCtx.createPattern(pCanvas, 'no-repeat') ?? '';\n  }\n\n  /**\n   * This function is an helper for svg import. it returns the center of the object in the svg\n   * untransformed coordinates\n   * @private\n   * @return {Point} center point from element coordinates\n   */\n  _findCenterFromElement() {\n    return new Point(this.left + this.width / 2, this.top + this.height / 2);\n  }\n\n  /**\n   * Clones an instance.\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @returns {Promise<FabricObject>}\n   */\n  clone(propertiesToInclude?: string[]): Promise<this> {\n    const objectForm = this.toObject(propertiesToInclude);\n    return (this.constructor as typeof FabricObject).fromObject(\n      objectForm,\n    ) as unknown as Promise<this>;\n  }\n\n  /**\n   * Creates an instance of Image out of an object\n   * makes use of toCanvasElement.\n   * Once this method was based on toDataUrl and loadImage, so it also had a quality\n   * and format option. toCanvasElement is faster and produce no loss of quality.\n   * If you need to get a real Jpeg or Png from an object, using toDataURL is the right way to do it.\n   * toCanvasElement and then toBlob from the obtained canvas is also a good option.\n   * @todo fix the export type, it could not be Image but the type that getClass return for 'image'.\n   * @param {ObjectToCanvasElementOptions} [options] for clone as image, passed to toDataURL\n   * @param {Number} [options.multiplier=1] Multiplier to scale by\n   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n   * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n   * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n   * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n   * @return {FabricImage} Object cloned as image.\n   */\n  cloneAsImage(options: ObjectToCanvasElementOptions): FabricImage {\n    const canvasEl = this.toCanvasElement(options);\n    // TODO: how to import Image w/o an import cycle?\n    const ImageClass = classRegistry.getClass<typeof FabricImage>('image');\n    return new ImageClass(canvasEl);\n  }\n\n  /**\n   * Converts an object into a HTMLCanvas element\n   * @param {ObjectToCanvasElementOptions} options Options object\n   * @param {Number} [options.multiplier=1] Multiplier to scale by\n   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n   * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n   * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n   * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n   * @param {Boolean} [options.viewportTransform] Account for canvas viewport transform\n   * @param {(el?: HTMLCanvasElement) => StaticCanvas} [options.canvasProvider] Create the output canvas\n   * @return {HTMLCanvasElement} Returns DOM element <canvas> with the FabricObject\n   */\n  toCanvasElement(options: ObjectToCanvasElementOptions = {}) {\n    const origParams = saveObjectTransform(this),\n      originalGroup = this.group,\n      originalShadow = this.shadow,\n      abs = Math.abs,\n      retinaScaling = options.enableRetinaScaling ? getDevicePixelRatio() : 1,\n      multiplier = (options.multiplier || 1) * retinaScaling,\n      canvasProvider: (el: HTMLCanvasElement) => StaticCanvas =\n        options.canvasProvider ||\n        ((el: HTMLCanvasElement) =>\n          new StaticCanvas(el, {\n            enableRetinaScaling: false,\n            renderOnAddRemove: false,\n            skipOffscreen: false,\n          }));\n    delete this.group;\n    if (options.withoutTransform) {\n      resetObjectTransform(this);\n    }\n    if (options.withoutShadow) {\n      this.shadow = null;\n    }\n    if (options.viewportTransform) {\n      sendObjectToPlane(this, this.getViewportTransform());\n    }\n\n    this.setCoords();\n    const el = createCanvasElement(),\n      boundingRect = this.getBoundingRect(),\n      shadow = this.shadow,\n      shadowOffset = new Point();\n\n    /*________________________ *PMW* added portion start ________________________*/\n    // extends bounding box to cater to font of text objects inside group item (text/slideshow item).\n    // This is used to prevent text from getting cut off during pdf generation.\n\n    if (options.expandBoundingBoxByFont && this.isGroup()) {\n      let maxWidthToAdd = 0,\n        maxHeightToAdd = 0;\n      const maxFontSize = this._getMaxExpandedFontSizeFromTextChildren();\n\n      if (maxFontSize > 0) {\n        maxWidthToAdd = boundingRect.width * 0.75;\n        maxHeightToAdd = boundingRect.height * 0.75;\n      }\n\n      boundingRect.width += maxWidthToAdd;\n      boundingRect.height += maxHeightToAdd;\n    }\n    /*________________________ *PMW* added portion end ________________________*/\n\n    if (shadow) {\n      const shadowBlur = shadow.blur;\n      const scaling = shadow.nonScaling\n        ? new Point(1, 1)\n        : this.getObjectScaling();\n      // consider non scaling shadow.\n      shadowOffset.x =\n        2 * Math.round(abs(shadow.offsetX) + shadowBlur) * abs(scaling.x);\n      shadowOffset.y =\n        2 * Math.round(abs(shadow.offsetY) + shadowBlur) * abs(scaling.y);\n    }\n    const width = boundingRect.width + shadowOffset.x,\n      height = boundingRect.height + shadowOffset.y;\n    // if the current width/height is not an integer\n    // we need to make it so.\n    el.width = Math.ceil(width);\n    el.height = Math.ceil(height);\n    const canvas = canvasProvider(el);\n    if (options.format === 'jpeg') {\n      canvas.backgroundColor = '#fff';\n    }\n    this.setPositionByOrigin(\n      new Point(canvas.width / 2, canvas.height / 2),\n      CENTER,\n      CENTER,\n    );\n    const originalCanvas = this.canvas;\n    // static canvas and canvas have both an array of InteractiveObjects\n    // @ts-expect-error this needs to be fixed somehow, or ignored globally\n    canvas._objects = [this];\n    this.set('canvas', canvas);\n    this.setCoords();\n    const canvasEl = canvas.toCanvasElement(multiplier || 1, options);\n    this.set('canvas', originalCanvas);\n    this.shadow = originalShadow;\n    if (originalGroup) {\n      this.group = originalGroup;\n    }\n    this.set(origParams);\n    this.setCoords();\n    // canvas.dispose will call image.dispose that will nullify the elements\n    // since this canvas is a simple element for the process, we remove references\n    // to objects in this way in order to avoid object trashing.\n    canvas._objects = [];\n    // since render has settled it is safe to destroy canvas\n    canvas.destroy();\n    return canvasEl;\n  }\n\n  isGroup(): this is Group{\n    return false;\n  }\n\n  /**\n   * *PMW*\n   */\n  public getCornerPoints(center: XY): GetCornerPointsResponse {\n    const angle = this.angle;\n    let width = this.getScaledWidth();\n    const height = this.getScaledHeight();\n    const x = center.x;\n    const y = center.y;\n    const theta = degreesToRadians(angle);\n\n    if (width < 0) {\n      width = Math.abs(width);\n    }\n\n    const sinTh = Math.sin(theta),\n      cosTh = Math.cos(theta),\n      _angle = width > 0 ? Math.atan(height / width) : 0,\n      _hypotenuse = width / Math.cos(_angle) / 2,\n      offsetX = Math.cos(_angle + theta) * _hypotenuse,\n      offsetY = Math.sin(_angle + theta) * _hypotenuse;\n\n    return {\n      tl: new Point(x - offsetX, y - offsetY),\n      tr: new Point(x - offsetX + width * cosTh, y - offsetY + width * sinTh),\n      bl: new Point(x - offsetX - height * sinTh, y - offsetY + height * cosTh),\n      br: new Point(x + offsetX, y + offsetY),\n    };\n  }\n\n  /**\n   * Converts an object into a data-url-like string\n   * @param {Object} options Options object\n   * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\n   * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\n   * @param {Number} [options.multiplier=1] Multiplier to scale by\n   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n   * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n   * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n   * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n   * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\n   */\n  toDataURL(options: toDataURLOptions = {}) {\n    return toDataURL(\n      this.toCanvasElement(options),\n      options.format || 'png',\n      options.quality || 1,\n    );\n  }\n\n  /**\n   * Returns true if any of the specified types is identical to the type of an instance\n   * @param {String} type Type to check against\n   * @return {Boolean}\n   */\n  isType(...types: string[]) {\n    return (\n      types.includes((this.constructor as typeof FabricObject).type) ||\n      types.includes(this.type)\n    );\n  }\n\n  /**\n   * Returns complexity of an instance\n   * @return {Number} complexity of this instance (is 1 unless subclassed)\n   */\n  complexity() {\n    return 1;\n  }\n\n  /**\n   * Returns a JSON representation of an instance\n   * @return {Object} JSON\n   */\n  toJSON() {\n    // delegate, not alias\n    return this.toObject();\n  }\n\n  /**\n   * Sets \"angle\" of an instance with centered rotation\n   * @param {TDegree} angle Angle value (in degrees)\n   */\n  rotate(angle: TDegree) {\n    const { centeredRotation, originX, originY } = this;\n\n    if (centeredRotation) {\n      const { x, y } = this.getRelativeCenterPoint();\n      this.originX = CENTER;\n      this.originY = CENTER;\n      this.left = x;\n      this.top = y;\n    }\n\n    this.set('angle', angle);\n\n    if (centeredRotation) {\n      const { x, y } = this.translateToOriginPoint(\n        this.getRelativeCenterPoint(),\n        originX,\n        originY,\n      );\n      this.left = x;\n      this.top = y;\n      this.originX = originX;\n      this.originY = originY;\n    }\n  }\n\n  /**\n   * This callback function is called by the parent group of an object every\n   * time a non-delegated property changes on the group. It is passed the key\n   * and value as parameters. Not adding in this function's signature to avoid\n   * Travis build error about unused variables.\n   */\n  setOnGroup() {\n    // implemented by sub-classes, as needed.\n  }\n\n  /**\n   * Sets canvas globalCompositeOperation for specific object\n   * custom composition operation for the particular object can be specified using globalCompositeOperation property\n   * @param {CanvasRenderingContext2D} ctx Rendering canvas context\n   */\n  _setupCompositeOperation(ctx: CanvasRenderingContext2D) {\n    if (this.globalCompositeOperation) {\n      ctx.globalCompositeOperation = this.globalCompositeOperation;\n    }\n  }\n\n  /**\n   * cancel instance's running animations\n   * override if necessary to dispose artifacts such as `clipPath`\n   */\n  dispose() {\n    runningAnimations.cancelByTarget(this);\n    this.off();\n    this._set('canvas', undefined);\n    // clear caches\n    this._cacheCanvas && getEnv().dispose(this._cacheCanvas);\n    this._cacheCanvas = undefined;\n    this._cacheContext = null;\n  }\n\n  // #region Animation methods\n  /**\n   * List of properties to consider for animating colors.\n   * @type String[]\n   */\n  static colorProperties: string[] = [FILL, STROKE, 'backgroundColor'];\n\n  /**\n   * Animates object's properties\n   * @param {Record<string, number | number[] | TColorArg>} animatable map of keys and end values\n   * @param {Partial<AnimationOptions<T>>} options\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#animation}\n   * @return {Record<string, TAnimation<T>>} map of animation contexts\n   *\n   * As object — multiple properties\n   *\n   * object.animate({ left: ..., top: ... });\n   * object.animate({ left: ..., top: ... }, { duration: ... });\n   */\n  animate<T extends number | number[] | TColorArg>(\n    animatable: Record<string, T>,\n    options?: Partial<AnimationOptions<T>>,\n  ): Record<string, TAnimation<T>> {\n    return Object.entries(animatable).reduce(\n      (acc, [key, endValue]) => {\n        acc[key] = this._animate(key, endValue, options);\n        return acc;\n      },\n      {} as Record<string, TAnimation<T>>,\n    );\n  }\n\n  /**\n   * @private\n   * @param {String} key Property to animate\n   * @param {String} to Value to animate to\n   * @param {Object} [options] Options object\n   */\n  _animate<T extends number | number[] | TColorArg>(\n    key: string,\n    endValue: T,\n    options: Partial<AnimationOptions<T>> = {},\n  ): TAnimation<T> {\n    const path = key.split('.');\n    const propIsColor = (\n      this.constructor as typeof FabricObject\n    ).colorProperties.includes(path[path.length - 1]);\n    const { abort, startValue, onChange, onComplete } = options;\n    const animationOptions = {\n      ...options,\n      target: this,\n      // path.reduce... is the current value in case start value isn't provided\n      startValue:\n        startValue ?? path.reduce((deep: any, key) => deep[key], this),\n      endValue,\n      abort: abort?.bind(this),\n      onChange: (\n        value: number | number[] | string,\n        valueProgress: number,\n        durationProgress: number,\n      ) => {\n        path.reduce((deep: Record<string, any>, key, index) => {\n          if (index === path.length - 1) {\n            deep[key] = value;\n          }\n          return deep[key];\n        }, this);\n        onChange &&\n          // @ts-expect-error generic callback arg0 is wrong\n          onChange(value, valueProgress, durationProgress);\n      },\n      onComplete: (\n        value: number | number[] | string,\n        valueProgress: number,\n        durationProgress: number,\n      ) => {\n        this.setCoords();\n        onComplete &&\n          // @ts-expect-error generic callback arg0 is wrong\n          onComplete(value, valueProgress, durationProgress);\n      },\n    } as AnimationOptions<T>;\n\n    return (\n      propIsColor\n        ? animateColor(animationOptions as ColorAnimationOptions)\n        : animate(\n            animationOptions as ValueAnimationOptions | ArrayAnimationOptions,\n          )\n    ) as TAnimation<T>;\n  }\n\n  // #region Object stacking methods\n\n  /**\n   * A reference to the parent of the object\n   * Used to keep the original parent ref when the object has been added to an ActiveSelection, hence loosing the `group` ref\n   */\n  declare parent?: Group;\n\n  /**\n   * Checks if object is descendant of target\n   * Should be used instead of {@link Group.contains} or {@link StaticCanvas.contains} for performance reasons\n   * @param {TAncestor} target\n   * @returns {boolean}\n   */\n  isDescendantOf(target: TAncestor): boolean {\n    const { parent, group } = this;\n    return (\n      parent === target ||\n      group === target ||\n      // walk up\n      (!!parent && parent.isDescendantOf(target)) ||\n      (!!group && group !== parent && group.isDescendantOf(target))\n    );\n  }\n\n  /**\n   * @returns {Ancestors} ancestors (excluding `ActiveSelection`) from bottom to top\n   */\n  getAncestors(): Ancestors {\n    const ancestors: TAncestor[] = [];\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let parent: TAncestor | undefined = this;\n    do {\n      parent = parent.parent;\n      parent && ancestors.push(parent);\n    } while (parent);\n    return ancestors as Ancestors;\n  }\n\n  /**\n   * Compare ancestors\n   *\n   * @param {StackedObject} other\n   * @returns {AncestryComparison} an object that represent the ancestry situation.\n   */\n  findCommonAncestors<T extends this>(other: T): AncestryComparison {\n    if (this === other) {\n      return {\n        fork: [],\n        otherFork: [],\n        common: [this, ...this.getAncestors()],\n      } as AncestryComparison;\n    }\n    const ancestors = this.getAncestors();\n    const otherAncestors = other.getAncestors();\n    //  if `this` has no ancestors and `this` is top ancestor of `other` we must handle the following case\n    if (\n      ancestors.length === 0 &&\n      otherAncestors.length > 0 &&\n      this === otherAncestors[otherAncestors.length - 1]\n    ) {\n      return {\n        fork: [],\n        otherFork: [\n          other,\n          ...otherAncestors.slice(0, otherAncestors.length - 1),\n        ],\n        common: [this],\n      } as AncestryComparison;\n    }\n    //  compare ancestors\n    for (let i = 0, ancestor; i < ancestors.length; i++) {\n      ancestor = ancestors[i];\n      if (ancestor === other) {\n        return {\n          fork: [this, ...ancestors.slice(0, i)],\n          otherFork: [],\n          common: ancestors.slice(i),\n        } as AncestryComparison;\n      }\n      for (let j = 0; j < otherAncestors.length; j++) {\n        if (this === otherAncestors[j]) {\n          return {\n            fork: [],\n            otherFork: [other, ...otherAncestors.slice(0, j)],\n            common: [this, ...ancestors],\n          } as AncestryComparison;\n        }\n        if (ancestor === otherAncestors[j]) {\n          return {\n            fork: [this, ...ancestors.slice(0, i)],\n            otherFork: [other, ...otherAncestors.slice(0, j)],\n            common: ancestors.slice(i),\n          } as AncestryComparison;\n        }\n      }\n    }\n    // nothing shared\n    return {\n      fork: [this, ...ancestors],\n      otherFork: [other, ...otherAncestors],\n      common: [],\n    } as AncestryComparison;\n  }\n\n  /**\n   *\n   * @param {StackedObject} other\n   * @returns {boolean}\n   */\n  hasCommonAncestors<T extends this>(other: T): boolean {\n    const commonAncestors = this.findCommonAncestors(other);\n    return commonAncestors && !!commonAncestors.common.length;\n  }\n\n  /**\n   *\n   * @param {FabricObject} other object to compare against\n   * @returns {boolean | undefined} if objects do not share a common ancestor or they are strictly equal it is impossible to determine which is in front of the other; in such cases the function returns `undefined`\n   */\n  isInFrontOf<T extends this>(other: T): boolean | undefined {\n    if (this === other) {\n      return undefined;\n    }\n    const ancestorData = this.findCommonAncestors(other);\n\n    if (ancestorData.fork.includes(other as any)) {\n      return true;\n    }\n    if (ancestorData.otherFork.includes(this as any)) {\n      return false;\n    }\n    // if there isn't a common ancestor, we take the canvas.\n    // if there is no canvas, there is nothing to compare\n    const firstCommonAncestor = ancestorData.common[0] || this.canvas;\n    if (!firstCommonAncestor) {\n      return undefined;\n    }\n    const headOfFork = ancestorData.fork.pop(),\n      headOfOtherFork = ancestorData.otherFork.pop(),\n      thisIndex = (firstCommonAncestor as TCollection)._objects.indexOf(\n        headOfFork as any,\n      ),\n      otherIndex = (firstCommonAncestor as TCollection)._objects.indexOf(\n        headOfOtherFork as any,\n      );\n    return thisIndex > -1 && thisIndex > otherIndex;\n  }\n\n  // #region Serialization\n  /**\n   * Define a list of custom properties that will be serialized when\n   * instance.toObject() gets called\n   */\n  static customProperties: string[] = [];\n\n  /**\n   * Returns an object representation of an instance\n   * @param {string[]} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toObject(propertiesToInclude: any[] = []): any {\n    const propertiesToSerialize = propertiesToInclude.concat(\n      FabricObject.customProperties,\n      (this.constructor as typeof FabricObject).customProperties || [],\n    );\n    let clipPathData: Partial<SerializedObjectProps> | undefined;\n    const NUM_FRACTION_DIGITS = config.NUM_FRACTION_DIGITS;\n    const {\n      clipPath,\n      fill,\n      stroke,\n      shadow,\n      strokeDashArray,\n      left,\n      top,\n      originX,\n      originY,\n      width,\n      height,\n      strokeWidth,\n      strokeLineCap,\n      strokeDashOffset,\n      strokeLineJoin,\n      strokeUniform,\n      strokeMiterLimit,\n      scaleX,\n      scaleY,\n      angle,\n      flipX,\n      flipY,\n      opacity,\n      visible,\n      backgroundColor,\n      fillRule,\n      paintFirst,\n      globalCompositeOperation,\n      skewX,\n      skewY,\n    } = this;\n    if (clipPath && !clipPath.excludeFromExport) {\n      clipPathData = clipPath.toObject(\n        propertiesToSerialize.concat('inverted', 'absolutePositioned'),\n      );\n    }\n    const toFixedBound = (val: number) => toFixed(val, NUM_FRACTION_DIGITS);\n    const object = {\n      ...pick(this, propertiesToSerialize as (keyof this)[]),\n      type: (this.constructor as typeof FabricObject).type,\n      version: VERSION,\n      originX,\n      originY,\n      left: toFixedBound(left),\n      top: toFixedBound(top),\n      width: toFixedBound(width),\n      height: toFixedBound(height),\n      fill: isSerializableFiller(fill) ? fill.toObject() : fill,\n      stroke: isSerializableFiller(stroke) ? stroke.toObject() : stroke,\n      strokeWidth: toFixedBound(strokeWidth),\n      strokeDashArray: strokeDashArray\n        ? strokeDashArray.concat()\n        : strokeDashArray,\n      strokeLineCap,\n      strokeDashOffset,\n      strokeLineJoin,\n      strokeUniform,\n      strokeMiterLimit: toFixedBound(strokeMiterLimit),\n      scaleX: toFixedBound(scaleX),\n      scaleY: toFixedBound(scaleY),\n      angle: toFixedBound(angle),\n      flipX,\n      flipY,\n      opacity: toFixedBound(opacity),\n      shadow: shadow ? shadow.toObject() : shadow,\n      visible,\n      backgroundColor,\n      fillRule,\n      paintFirst,\n      globalCompositeOperation,\n      skewX: toFixedBound(skewX),\n      skewY: toFixedBound(skewY),\n      ...(clipPathData ? { clipPath: clipPathData } : null),\n    };\n\n    return !this.includeDefaultValues\n      ? this._removeDefaultValues(object)\n      : object;\n  }\n\n  /**\n   * Returns (dataless) object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toDatalessObject(propertiesToInclude?: any[]): any {\n    // will be overwritten by subclasses\n    return this.toObject(propertiesToInclude);\n  }\n\n  /**\n   * @private\n   * @param {Object} object\n   */\n  _removeDefaultValues<T extends object>(object: T): Partial<T> {\n    // getDefaults() ( get from static ownDefaults ) should win over prototype since anyway they get assigned to instance\n    // ownDefault vs prototype is swappable only if you change all the fabric objects consistently.\n    const defaults = (this.constructor as typeof FabricObject).getDefaults();\n    const hasStaticDefaultValues = Object.keys(defaults).length > 0;\n    const baseValues = hasStaticDefaultValues\n      ? defaults\n      : Object.getPrototypeOf(this);\n\n    return pickBy(object, (value, key) => {\n      if (key === LEFT || key === TOP || key === 'type') {\n        return true;\n      }\n      const baseValue = baseValues[key];\n      return (\n        value !== baseValue &&\n        // basically a check for [] === []\n        !(\n          Array.isArray(value) &&\n          Array.isArray(baseValue) &&\n          value.length === 0 &&\n          baseValue.length === 0\n        )\n      );\n    });\n  }\n\n  /**\n   * Returns a string representation of an instance\n   * @return {String}\n   */\n  toString() {\n    return `#<${(this.constructor as typeof FabricObject).type}>`;\n  }\n\n  /**\n   *\n   * @param {Function} klass\n   * @param {object} object\n   * @param {object} [options]\n   * @param {string} [options.extraParam] property to pass as first argument to the constructor\n   * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<FabricObject>}\n   */\n  static _fromObject<S extends FabricObject>(\n    { type, ...serializedObjectOptions }: Record<string, unknown>,\n    { extraParam, ...options }: Abortable & { extraParam?: string } = {},\n  ): Promise<S> {\n    return enlivenObjectEnlivables<any>(serializedObjectOptions, options).then(\n      (enlivedObjectOptions) => {\n        // from the resulting enlived options, extract options.extraParam to arg0\n        // to avoid accidental overrides later\n        if (extraParam) {\n          delete enlivedObjectOptions[extraParam];\n          return new this(\n            serializedObjectOptions[extraParam],\n            // @ts-expect-error different signature\n            enlivedObjectOptions,\n          );\n        } else {\n          return new this(enlivedObjectOptions);\n        }\n      },\n    ) as Promise<S>;\n  }\n\n  /**\n   *\n   * @param {object} object\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<FabricObject>}\n   */\n  static fromObject<T extends TOptions<SerializedObjectProps>>(\n    object: T,\n    options?: Abortable,\n  ) {\n    return this._fromObject(object, options);\n  }\n}\n\nclassRegistry.setClass(FabricObject);\nclassRegistry.setClass(FabricObject, 'object');\n"],"names":["FabricObject","ObjectGeometry","getDefaults","ownDefaults","type","name","this","constructor","toLowerCase","value","log","options","super","_defineProperty","Object","assign","setOptions","_createCacheCanvas","_cacheCanvas","createCanvasElement","_cacheContext","getContext","_updateCacheCanvas","dirty","_limitCacheSize","dims","width","height","max","config","maxCacheSideLimit","min","minCacheSideLimit","perfLimitSizeTotal","ar","limX","limY","cache","limitDimsByArea","x","capValue","y","zoomX","capped","zoomY","_getCacheCanvasDimensions","objectScale","getTotalObjectScaling","dim","_getTransformedDimensions","skewX","skewY","neededX","scaleX","neededY","scaleY","ALIASING_LIMIT","eqqwe","eqqwe2","canvas","context","minCacheSize","dimensionsChanged","zoomChanged","drawingWidth","drawingHeight","shouldRedraw","additionalWidth","additionalHeight","shouldResizeCanvas","canvasWidth","canvasHeight","sizeGrowing","isTextObject","path","getHeightOfLine","Math","ceil","setTransform","clearRect","cacheTranslationX","round","cacheTranslationY","translate","scale","arguments","length","undefined","_setOptions","transform","ctx","needFullTransform","group","_transformDone","contextTop","m","calcTransformMatrix","getObjectScaling","Point","abs","qrDecompose","zoom","getZoom","retina","getCanvasRetinaScaling","scalarMultiply","getObjectOpacity","opacity","_constrainScale","minScaleLimit","_set","key","SCALE_X","SCALE_Y","flipX","flipY","Shadow","isChanged","cacheProperties","includes","parent","stateProperties","isNotVisible","strokeWidth","visible","render","skipOffscreen","isOnScreen","save","_setupCompositeOperation","drawSelectionBackground","_setOpacity","_setShadow","shouldCache","renderCache","drawCacheOnCanvas","_removeCacheCanvas","drawObject","restore","_ctx","isCacheDirty","forClipping","hasStroke","stroke","hasFill","fill","needsItsOwnCache","paintFirst","STROKE","shadow","clipPath","ownCaching","objectCaching","isOnACache","willDrawShadow","offsetX","offsetY","drawClipPathOnCache","inverted","globalCompositeOperation","absolutePositioned","invertTransform","drawImage","originalFill","originalStroke","_setClippingProperties","_renderBackground","_render","_drawClipPath","skipCanvas","backgroundColor","leanBackground","fillStyle","beginPath","offset","leanBackgroundOffset","slant","yFix","moveTo","lineTo","closePath","_getNonTransformedDimensions","fillRect","_removeShadow","globalAlpha","_setStrokeStyles","decl","lineWidth","lineCap","strokeLineCap","lineDashOffset","strokeDashOffset","lineJoin","strokeLineJoin","miterLimit","strokeMiterLimit","isFiller","gradientUnits","gradientTransform","patternTransform","_applyPatternForTransformedGradient","strokeStyle","toLive","_applyPatternGradientTransform","_setFillStyles","_ref","_setLineDash","dashArray","push","setLineDash","retinaScaling","sx","sy","viewportTransform","iMatrix","multX","multY","scaling","nonScaling","shadowColor","color","shadowBlur","blur","browserShadowBlurConstant","shadowOffsetX","shadowOffsetY","filler","t","_renderPaintInOrder","_renderStroke","_renderFill","fillRule","affectStroke","strokeUniform","strokeDashArray","_pCtx$createPattern","pCanvas","pCtx","createPattern","_findCenterFromElement","left","top","clone","propertiesToInclude","objectForm","toObject","fromObject","cloneAsImage","canvasEl","toCanvasElement","classRegistry","getClass","origParams","saveObjectTransform","originalGroup","originalShadow","enableRetinaScaling","getDevicePixelRatio","multiplier","canvasProvider","el","StaticCanvas","renderOnAddRemove","withoutTransform","resetObjectTransform","withoutShadow","sendObjectToPlane","getViewportTransform","setCoords","boundingRect","getBoundingRect","shadowOffset","expandBoundingBoxByFont","isGroup","maxWidthToAdd","maxHeightToAdd","_getMaxExpandedFontSizeFromTextChildren","format","setPositionByOrigin","CENTER","originalCanvas","_objects","set","destroy","getCornerPoints","center","angle","getScaledWidth","getScaledHeight","theta","degreesToRadians","sinTh","sin","cosTh","cos","_angle","atan","_hypotenuse","tl","tr","bl","br","toDataURL","quality","isType","_len","types","Array","_key","complexity","toJSON","rotate","centeredRotation","originX","originY","getRelativeCenterPoint","translateToOriginPoint","setOnGroup","dispose","runningAnimations","cancelByTarget","off","getEnv","animate","animatable","entries","reduce","acc","_ref2","endValue","_animate","split","propIsColor","colorProperties","abort","startValue","onChange","onComplete","animationOptions","_objectSpread","target","deep","bind","valueProgress","durationProgress","index","animateColor","isDescendantOf","getAncestors","ancestors","findCommonAncestors","other","fork","otherFork","common","otherAncestors","slice","ancestor","i","j","hasCommonAncestors","commonAncestors","isInFrontOf","ancestorData","firstCommonAncestor","headOfFork","pop","headOfOtherFork","thisIndex","indexOf","otherIndex","propertiesToSerialize","concat","customProperties","clipPathData","NUM_FRACTION_DIGITS","excludeFromExport","toFixedBound","val","toFixed","object","pick","version","VERSION","isSerializableFiller","includeDefaultValues","_removeDefaultValues","toDatalessObject","defaults","baseValues","keys","getPrototypeOf","pickBy","LEFT","TOP","baseValue","isArray","toString","_fromObject","_ref3","serializedObjectOptions","_objectWithoutProperties","_excluded","_ref4","extraParam","_excluded2","enlivenObjectEnlivables","then","enlivedObjectOptions","fabricObjectDefaultValues","FILL","setClass"],"mappings":"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"}