{"version":3,"file":"Rect.mjs","sources":["../../../src/shapes/Rect.ts"],"sourcesContent":["import { kRect } from '../constants';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport type { CSSRules } from '../parser/typedefs';\n\nexport const rectDefaultValues: Partial<TClassProperties<Rect>> = {\n  uniformRoundness: false,\n  rx: 0,\n  ry: 0,\n};\n\ninterface UniqueRectProps {\n  uniformRoundness: boolean;\n  rx: number;\n  ry: number;\n}\n\nexport interface SerializedRectProps\n  extends SerializedObjectProps,\n    UniqueRectProps {\n}\n\nexport interface RectProps extends FabricObjectProps, UniqueRectProps {\n}\n\nconst RECT_PROPS = ['rx', 'ry'] as const;\n\nexport class Rect<\n  Props extends TOptions<RectProps> = Partial<RectProps>,\n  SProps extends SerializedRectProps = SerializedRectProps,\n  EventSpec extends ObjectEvents = ObjectEvents,\n>\n  extends FabricObject<Props, SProps, EventSpec>\n  implements RectProps {\n  declare uniformRoundness: boolean;\n  /**\n   * Horizontal border radius\n   * @type Number\n   * @default\n   */\n  declare rx: number;\n\n  /**\n   * Vertical border radius\n   * @type Number\n   * @default\n   */\n  declare ry: number;\n\n  static type = 'Rect';\n\n  static cacheProperties = [...cacheProperties, ...RECT_PROPS];\n\n  static ownDefaults = rectDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Rect.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, Rect.ownDefaults);\n    this.setOptions(options);\n    this._initRxRy();\n  }\n\n  /**\n   * Initializes rx/ry attributes\n   * @private\n   */\n  _initRxRy() {\n    const { rx, ry } = this;\n    if (rx && !ry) {\n      this.ry = rx;\n    } else if (ry && !rx) {\n      this.rx = ry;\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    const { width: w, height: h } = this;\n    const x = -w / 2;\n    const y = -h / 2;\n    let rx = this.rx ? this.rx : 0;\n    let ry = this.ry ? this.ry : 0;\n    const isRounded = rx !== 0 || ry !== 0;\n\n    if (this.uniformRoundness) {\n      const scaling = this.getObjectScaling();\n      rx = rx / scaling.x;\n      ry = ry / scaling.y;\n    }\n\n    rx = Math.min(rx, w / 2);\n    ry = Math.min(ry, h / 2);\n\n    ctx.beginPath();\n    ctx.moveTo(x + rx, y);\n\n    ctx.lineTo(x + w - rx, y);\n    isRounded &&\n    ctx.bezierCurveTo(\n      x + w - kRect * rx,\n      y,\n      x + w,\n      y + kRect * ry,\n      x + w,\n      y + ry,\n    );\n\n    ctx.lineTo(x + w, y + h - ry);\n    isRounded &&\n    ctx.bezierCurveTo(\n      x + w,\n      y + h - kRect * ry,\n      x + w - kRect * rx,\n      y + h,\n      x + w - rx,\n      y + h,\n    );\n\n    ctx.lineTo(x + rx, y + h);\n    isRounded &&\n    ctx.bezierCurveTo(\n      x + kRect * rx,\n      y + h,\n      x,\n      y + h - kRect * ry,\n      x,\n      y + h - ry,\n    );\n\n    ctx.lineTo(x, y + ry);\n    isRounded &&\n    ctx.bezierCurveTo(x, y + kRect * ry, x + kRect * rx, y, x + rx, y);\n\n    ctx.closePath();\n\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return super.toObject([...RECT_PROPS, ...propertiesToInclude]);\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const { width, height, rx, ry } = this;\n    return [\n      '<rect ',\n      'COMMON_PARTS',\n      `x=\"${-width / 2}\" y=\"${\n        -height / 2\n      }\" rx=\"${rx}\" ry=\"${ry}\" width=\"${width}\" height=\"${height}\" />\\n`,\n    ];\n  }\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by `Rect.fromElement`)\n   * @static\n   * @memberOf Rect\n   * @see: http://www.w3.org/TR/SVG/shapes.html#RectElement\n   */\n  static ATTRIBUTE_NAMES = [\n    ...SHARED_ATTRIBUTES,\n    'x',\n    'y',\n    'rx',\n    'ry',\n    'width',\n    'height',\n  ];\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * Returns {@link Rect} instance from an SVG element\n   * @static\n   * @memberOf Rect\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Options object\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable,\n    cssRules?: CSSRules,\n  ) {\n    const {\n      left = 0,\n      top = 0,\n      width = 0,\n      height = 0,\n      visible = true,\n      ...restOfparsedAttributes\n    } = parseAttributes(element, this.ATTRIBUTE_NAMES, cssRules);\n\n    return new this({\n      ...options,\n      ...restOfparsedAttributes,\n      left,\n      top,\n      width,\n      height,\n      visible: Boolean(visible && width && height),\n    });\n  }\n\n  /* _FROM_SVG_END_ */\n}\n\nclassRegistry.setClass(Rect);\nclassRegistry.setSVGClass(Rect);\n"],"names":["rectDefaultValues","uniformRoundness","rx","ry","RECT_PROPS","Rect","FabricObject","getDefaults","_objectSpread","ownDefaults","constructor","options","Object","assign","setOptions","_initRxRy","_render","ctx","width","w","height","h","x","y","isRounded","scaling","getObjectScaling","Math","min","beginPath","moveTo","lineTo","bezierCurveTo","kRect","closePath","_renderPaintInOrder","toObject","propertiesToInclude","arguments","length","undefined","_toSVG","concat","fromElement","element","cssRules","_parseAttributes","parseAttributes","ATTRIBUTE_NAMES","left","top","visible","restOfparsedAttributes","_objectWithoutProperties","_excluded","Boolean","_defineProperty","cacheProperties","SHARED_ATTRIBUTES","classRegistry","setClass","setSVGClass"],"mappings":"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"}