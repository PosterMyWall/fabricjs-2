{"version":3,"file":"Image.min.mjs","sources":["../../../src/shapes/Image.ts"],"sourcesContent":["import { getFabricDocument, getEnv } from '../env';\nimport type { BaseFilter } from '../filters/BaseFilter';\nimport { getFilterBackend } from '../filters/FilterBackend';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type {\n  TClassProperties,\n  TCrossOrigin,\n  TSize,\n  Abortable,\n  TOptions,\n} from '../typedefs';\nimport { uid } from '../util/internals/uid';\nimport { createCanvasElementFor } from '../util/misc/dom';\nimport { findScaleToCover, findScaleToFit } from '../util/misc/findScaleTo';\nimport type { LoadImageOptions } from '../util/misc/objectEnlive';\nimport {\n  enlivenObjectEnlivables,\n  enlivenObjects,\n  loadImage,\n} from '../util/misc/objectEnlive';\nimport { parsePreserveAspectRatioAttribute } from '../util/misc/svgParsing';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport { WebGLFilterBackend } from '../filters/WebGLFilterBackend';\nimport { FILL, NONE } from '../constants';\nimport { getDocumentFromElement } from '../util/dom_misc';\nimport type { CSSRules } from '../parser/typedefs';\nimport type { Resize, ResizeSerializedProps } from '../filters/Resize';\nimport type { TCachedFabricObject } from './Object/Object';\nimport { log } from '../util/internals/console';\n\n// @todo Would be nice to have filtering code not imported directly.\n\nexport type ImageSource =\n  | HTMLImageElement\n  | HTMLVideoElement\n  | HTMLCanvasElement;\n\ninterface UniqueImageProps {\n  srcFromAttribute: boolean;\n  minimumScaleTrigger: number;\n  cropX: number;\n  cropY: number;\n  imageSmoothing: boolean;\n  filters: BaseFilter<string, Record<string, any>>[];\n  resizeFilter?: Resize;\n}\n\nexport const imageDefaultValues: Partial<TClassProperties<FabricImage>> = {\n  strokeWidth: 0,\n  srcFromAttribute: false,\n  minimumScaleTrigger: 0.5,\n  cropX: 0,\n  cropY: 0,\n  imageSmoothing: true,\n};\n\nexport interface SerializedImageProps extends SerializedObjectProps {\n  src: string;\n  crossOrigin: TCrossOrigin;\n  filters: any[];\n  resizeFilter?: ResizeSerializedProps;\n  cropX: number;\n  cropY: number;\n}\n\nexport interface ImageProps extends FabricObjectProps, UniqueImageProps {}\n\nconst IMAGE_PROPS = ['cropX', 'cropY'] as const;\n\n/**\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#images}\n */\nexport class FabricImage<\n  Props extends TOptions<ImageProps> = Partial<ImageProps>,\n  SProps extends SerializedImageProps = SerializedImageProps,\n  EventSpec extends ObjectEvents = ObjectEvents,\n>\n  extends FabricObject<Props, SProps, EventSpec>\n  implements ImageProps\n{\n  /**\n   * When calling {@link FabricImage.getSrc}, return value from element src with `element.getAttribute('src')`.\n   * This allows for relative urls as image src.\n   * @since 2.7.0\n   * @type Boolean\n   * @default false\n   */\n  declare srcFromAttribute: boolean;\n\n  /**\n   * private\n   * contains last value of scaleX to detect\n   * if the Image got resized after the last Render\n   * @type Number\n   */\n  protected _lastScaleX = 1;\n\n  /**\n   * private\n   * contains last value of scaleY to detect\n   * if the Image got resized after the last Render\n   * @type Number\n   */\n  protected _lastScaleY = 1;\n\n  /**\n   * private\n   * contains last value of scaling applied by the apply filter chain\n   * @type Number\n   */\n  protected _filterScalingX = 1;\n\n  /**\n   * private\n   * contains last value of scaling applied by the apply filter chain\n   * @type Number\n   */\n  protected _filterScalingY = 1;\n\n  /**\n   * minimum scale factor under which any resizeFilter is triggered to resize the image\n   * 0 will disable the automatic resize. 1 will trigger automatically always.\n   * number bigger than 1 are not implemented yet.\n   * @type Number\n   */\n  declare minimumScaleTrigger: number;\n\n  /**\n   * key used to retrieve the texture representing this image\n   * @since 2.0.0\n   * @type String\n   * @default\n   */\n  declare cacheKey: string;\n\n  /**\n   * Image crop in pixels from original image size.\n   * @since 2.0.0\n   * @type Number\n   * @default\n   */\n  declare cropX: number;\n\n  /**\n   * Image crop in pixels from original image size.\n   * @since 2.0.0\n   * @type Number\n   * @default\n   */\n  declare cropY: number;\n\n  /**\n   * Indicates whether this canvas will use image smoothing when painting this image.\n   * Also influence if the cacheCanvas for this image uses imageSmoothing\n   * @since 4.0.0-beta.11\n   * @type Boolean\n   * @default\n   */\n  declare imageSmoothing: boolean;\n\n  declare preserveAspectRatio: string;\n\n  declare protected src: string;\n\n  declare filters: BaseFilter<string, Record<string, any>>[];\n  declare resizeFilter: Resize;\n\n  declare _element: ImageSource;\n  declare _filteredEl?: HTMLCanvasElement;\n  declare _originalElement: ImageSource;\n\n  static type = 'Image';\n\n  static cacheProperties = [...cacheProperties, ...IMAGE_PROPS];\n\n  static ownDefaults = imageDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...FabricImage.ownDefaults,\n    };\n  }\n  /**\n   * Constructor\n   * Image can be initialized with any canvas drawable or a string.\n   * The string should be a url and will be loaded as an image.\n   * Canvas and Image element work out of the box, while videos require extra code to work.\n   * Please check video element events for seeking.\n   * @param {ImageSource | string} element Image element\n   * @param {Object} [options] Options object\n   */\n  constructor(elementId: string, options?: Props);\n  constructor(element: ImageSource, options?: Props);\n  constructor(arg0: ImageSource | string, options?: Props) {\n    super();\n    this.filters = [];\n    Object.assign(this, FabricImage.ownDefaults);\n    this.setOptions(options);\n    this.cacheKey = `texture${uid()}`;\n    this.setElement(\n      typeof arg0 === 'string'\n        ? ((\n          (this.canvas && getDocumentFromElement(this.canvas.getElement())) ||\n          getFabricDocument()\n        ).getElementById(arg0) as ImageSource)\n        : arg0,\n      options,\n    );\n  }\n\n  /**\n   * Returns image element which this instance if based on\n   */\n  getElement() {\n    return this._element;\n  }\n\n  /**\n   * Sets image element for this instance to a specified one.\n   * If filters defined they are applied to new image.\n   * You might need to call `canvas.renderAll` and `object.setCoords` after replacing, to render new image and update controls area.\n   * @param {HTMLImageElement} element\n   * @param {Partial<TSize>} [size] Options object\n   */\n  setElement(element: ImageSource, size: Partial<TSize> = {}) {\n    this.removeTexture(this.cacheKey);\n    this.removeTexture(`${this.cacheKey}_filtered`);\n    this._element = element;\n    this._originalElement = element;\n    this._setWidthHeight(size);\n    if (this.filters.length !== 0) {\n      this.applyFilters();\n    }\n    // resizeFilters work on the already filtered copy.\n    // we need to apply resizeFilters AFTER normal filters.\n    // applyResizeFilters is run more often than normal filters\n    // and is triggered by user interactions rather than dev code\n    if (this.resizeFilter) {\n      this.applyResizeFilters();\n    }\n  }\n\n  /**\n   * Delete a single texture if in webgl mode\n   */\n  removeTexture(key: string) {\n    const backend = getFilterBackend(false);\n    if (backend instanceof WebGLFilterBackend) {\n      backend.evictCachesForKey(key);\n    }\n  }\n\n  /**\n   * Delete textures, reference to elements and eventually JSDOM cleanup\n   */\n  dispose() {\n    super.dispose();\n    this.removeTexture(this.cacheKey);\n    this.removeTexture(`${this.cacheKey}_filtered`);\n    this._cacheContext = null;\n    (\n      ['_originalElement', '_element', '_filteredEl', '_cacheCanvas'] as const\n    ).forEach((elementKey) => {\n      const el = this[elementKey];\n      el && getEnv().dispose(el);\n      // @ts-expect-error disposing\n      this[elementKey] = undefined;\n    });\n  }\n\n  /**\n   * Get the crossOrigin value (of the corresponding image element)\n   */\n  getCrossOrigin(): string | null {\n    return (\n      this._originalElement &&\n      ((this._originalElement as any).crossOrigin || null)\n    );\n  }\n\n  /**\n   * Returns original size of an image\n   */\n  getOriginalSize() {\n    const element = this.getElement() as any;\n    if (!element) {\n      return {\n        width: 0,\n        height: 0,\n      };\n    }\n    return {\n      width: element.naturalWidth || element.width,\n      height: element.naturalHeight || element.height,\n    };\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _stroke(ctx: CanvasRenderingContext2D) {\n    if (!this.stroke || this.strokeWidth === 0) {\n      return;\n    }\n    const w = this.width / 2,\n      h = this.height / 2;\n    ctx.beginPath();\n    ctx.moveTo(-w, -h);\n    ctx.lineTo(w, -h);\n    ctx.lineTo(w, h);\n    ctx.lineTo(-w, h);\n    ctx.lineTo(-w, -h);\n    ctx.closePath();\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    const filters: Record<string, any>[] = [];\n    this.filters.forEach((filterObj) => {\n      filterObj && filters.push(filterObj.toObject());\n    });\n    return {\n      ...super.toObject([...IMAGE_PROPS, ...propertiesToInclude]),\n      src: this.getSrc(),\n      crossOrigin: this.getCrossOrigin(),\n      filters,\n      ...(this.resizeFilter\n        ? { resizeFilter: this.resizeFilter.toObject() }\n        : {}),\n    };\n  }\n\n  /**\n   * Returns true if an image has crop applied, inspecting values of cropX,cropY,width,height.\n   * @return {Boolean}\n   */\n  hasCrop() {\n    return (\n      !!this.cropX ||\n      !!this.cropY ||\n      this.width < this._element.width ||\n      this.height < this._element.height\n    );\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {string[]} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const imageMarkup: string[] = [],\n      element = this._element,\n      x = -this.width / 2,\n      y = -this.height / 2;\n    let svgString: string[] = [],\n      strokeSvg: string[] = [],\n      clipPath = '',\n      imageRendering = '';\n    if (!element) {\n      return [];\n    }\n    if (this.hasCrop()) {\n      const clipPathId = uid();\n      svgString.push(\n        '<clipPath id=\"imageCrop_' + clipPathId + '\">\\n',\n        '\\t<rect x=\"' +\n        x +\n        '\" y=\"' +\n        y +\n        '\" width=\"' +\n        this.width +\n        '\" height=\"' +\n        this.height +\n        '\" />\\n',\n        '</clipPath>\\n',\n      );\n      clipPath = ' clip-path=\"url(#imageCrop_' + clipPathId + ')\" ';\n    }\n    if (!this.imageSmoothing) {\n      imageRendering = ' image-rendering=\"optimizeSpeed\"';\n    }\n    imageMarkup.push(\n      '\\t<image ',\n      'COMMON_PARTS',\n      `xlink:href=\"${this.getSvgSrc(true)}\" x=\"${x - this.cropX}\" y=\"${\n        y - this.cropY\n        // we're essentially moving origin of transformation from top/left corner to the center of the shape\n        // by wrapping it in container <g> element with actual transformation, then offsetting object to the top/left\n        // so that object's center aligns with container's left/top\n      }\" width=\"${\n        element.width || (element as HTMLImageElement).naturalWidth\n      }\" height=\"${\n        element.height || (element as HTMLImageElement).naturalHeight\n      }\"${imageRendering}${clipPath}></image>\\n`,\n    );\n\n    if (this.stroke || this.strokeDashArray) {\n      const origFill = this.fill;\n      this.fill = null;\n      strokeSvg = [\n        `\\t<rect x=\"${x}\" y=\"${y}\" width=\"${this.width}\" height=\"${\n          this.height\n        }\" style=\"${this.getSvgStyles()}\" />\\n`,\n      ];\n      this.fill = origFill;\n    }\n    if (this.paintFirst !== FILL) {\n      svgString = svgString.concat(strokeSvg, imageMarkup);\n    } else {\n      svgString = svgString.concat(imageMarkup, strokeSvg);\n    }\n    return svgString;\n  }\n\n  /**\n   * Returns source of an image\n   * @param {Boolean} filtered indicates if the src is needed for svg\n   * @return {String} Source of an image\n   */\n  getSrc(filtered?: boolean): string {\n    const element = filtered ? this._element : this._originalElement;\n    if (element) {\n      if ((element as HTMLCanvasElement).toDataURL) {\n        return (element as HTMLCanvasElement).toDataURL();\n      }\n\n      if (this.srcFromAttribute) {\n        return element.getAttribute('src') || '';\n      } else {\n        return (element as HTMLImageElement).src;\n      }\n    } else {\n      return this.src || '';\n    }\n  }\n\n  /**\n   * Alias for getSrc\n   * @param filtered\n   * @deprecated\n   */\n  getSvgSrc(filtered?: boolean) {\n    return this.getSrc(filtered);\n  }\n\n  /**\n   * Loads and sets source of an image\\\n   * **IMPORTANT**: It is recommended to abort loading tasks before calling this method to prevent race conditions and unnecessary networking\n   * @param {String} src Source string (URL)\n   * @param {LoadImageOptions} [options] Options object\n   */\n  setSrc(src: string, { crossOrigin, signal }: LoadImageOptions = {}) {\n    return loadImage(src, { crossOrigin, signal }).then((img) => {\n      typeof crossOrigin !== 'undefined' && this.set({ crossOrigin });\n      this.setElement(img);\n    });\n  }\n\n  /**\n   * Returns string representation of an instance\n   * @return {String} String representation of an instance\n   */\n  toString() {\n    return `#<Image: { src: \"${this.getSrc()}\" }>`;\n  }\n\n  applyResizeFilters() {\n    const filter = this.resizeFilter,\n      minimumScale = this.minimumScaleTrigger,\n      objectScale = this.getTotalObjectScaling(),\n      scaleX = objectScale.x,\n      scaleY = objectScale.y,\n      elementToFilter = this._filteredEl || this._originalElement;\n    if (this.group) {\n      this.set('dirty', true);\n    }\n    if (!filter || (scaleX > minimumScale && scaleY > minimumScale)) {\n      this._element = elementToFilter;\n      this._filterScalingX = 1;\n      this._filterScalingY = 1;\n      this._lastScaleX = scaleX;\n      this._lastScaleY = scaleY;\n      return;\n    }\n    const canvasEl = createCanvasElementFor(elementToFilter),\n      { width, height } = elementToFilter;\n    this._element = canvasEl;\n    this._lastScaleX = filter.scaleX = scaleX;\n    this._lastScaleY = filter.scaleY = scaleY;\n    getFilterBackend().applyFilters(\n      [filter],\n      elementToFilter,\n      width,\n      height,\n      this._element,\n    );\n    this._filterScalingX = canvasEl.width / this._originalElement.width;\n    this._filterScalingY = canvasEl.height / this._originalElement.height;\n  }\n\n  /**\n   * Applies filters assigned to this image (from \"filters\" array) or from filter param\n   * @method applyFilters\n   * @param {Array} filters to be applied\n   * @param {Boolean} forResizing specify if the filter operation is a resize operation\n   */\n  applyFilters(\n    filters: BaseFilter<string, Record<string, any>>[] = this.filters || [],\n  ) {\n    filters = filters.filter((filter) => filter && !filter.isNeutralState());\n    this.set('dirty', true);\n\n    // needs to clear out or WEBGL will not resize correctly\n    this.removeTexture(`${this.cacheKey}_filtered`);\n\n    if (filters.length === 0) {\n      this._element = this._originalElement;\n      // this is unsafe and needs to be rethinkend\n      this._filteredEl = undefined;\n      this._filterScalingX = 1;\n      this._filterScalingY = 1;\n      return;\n    }\n\n    const imgElement = this._originalElement,\n      sourceWidth =\n        (imgElement as HTMLImageElement).naturalWidth || imgElement.width,\n      sourceHeight =\n        (imgElement as HTMLImageElement).naturalHeight || imgElement.height;\n\n    //*PMW* Return here because filters need to be applied on each frame render for videos\n    if (imgElement.nodeName === 'VIDEO') {\n      return this;\n    }\n\n    if (this._element === this._originalElement) {\n      // if the _element a reference to _originalElement\n      // we need to create a new element to host the filtered pixels\n      const canvasEl = createCanvasElementFor({\n        width: sourceWidth,\n        height: sourceHeight,\n      });\n      this._element = canvasEl;\n      this._filteredEl = canvasEl;\n    } else if (this._filteredEl) {\n      // if the _element is it own element,\n      // and we also have a _filteredEl, then we clean up _filteredEl\n      // and we assign it to _element.\n      // in this way we invalidate the eventual old resize filtered element\n      this._element = this._filteredEl;\n      this._filteredEl\n        .getContext('2d')!\n        .clearRect(0, 0, sourceWidth, sourceHeight);\n      // we also need to resize again at next renderAll, so remove saved _lastScaleX/Y\n      this._lastScaleX = 1;\n      this._lastScaleY = 1;\n    }\n    getFilterBackend().applyFilters(\n      filters,\n      this._originalElement,\n      sourceWidth,\n      sourceHeight,\n      this._element as HTMLCanvasElement,\n      this.cacheKey,\n    );\n    if (\n      this._originalElement.width !== this._element.width ||\n      this._originalElement.height !== this._element.height\n    ) {\n      this._filterScalingX = this._element.width / this._originalElement.width;\n      this._filterScalingY =\n        this._element.height / this._originalElement.height;\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    ctx.imageSmoothingEnabled = this.imageSmoothing;\n    if (this.isMoving !== true && this.resizeFilter && this._needsResize()) {\n      this.applyResizeFilters();\n    }\n    this._stroke(ctx);\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Paint the cached copy of the object on the target context.\n   * it will set the imageSmoothing for the draw operation\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  drawCacheOnCanvas(\n    this: TCachedFabricObject<FabricImage>,\n    ctx: CanvasRenderingContext2D,\n  ) {\n    ctx.imageSmoothingEnabled = this.imageSmoothing;\n    super.drawCacheOnCanvas(ctx);\n  }\n\n  /**\n   * Decide if the FabricImage should cache or not. Create its own cache level\n   * needsItsOwnCache should be used when the object drawing method requires\n   * a cache step.\n   * Generally you do not cache objects in groups because the group outside is cached.\n   * This is the special Image version where we would like to avoid caching where possible.\n   * Essentially images do not benefit from caching. They may require caching, and in that\n   * case we do it. Also caching an image usually ends in a loss of details.\n   * A full performance audit should be done.\n   * @return {Boolean}\n   */\n  shouldCache() {\n    return this.needsItsOwnCache();\n  }\n\n  _renderFill(ctx: CanvasRenderingContext2D) {\n    let elementToDraw = this._element;\n    if (!elementToDraw) {\n      return;\n    }\n    const scaleX = this._filterScalingX,\n      scaleY = this._filterScalingY,\n      w = this.width,\n      h = this.height,\n      // crop values cannot be lesser than 0.\n      cropX = Math.max(this.cropX, 0),\n      cropY = Math.max(this.cropY, 0),\n      elWidth =\n        (elementToDraw as HTMLImageElement).naturalWidth || elementToDraw.width,\n      elHeight =\n        (elementToDraw as HTMLImageElement).naturalHeight ||\n        elementToDraw.height,\n      sX = cropX * scaleX,\n      sY = cropY * scaleY,\n      // the width height cannot exceed element width/height, starting from the crop offset.\n      sW = Math.min(w * scaleX, elWidth - sX),\n      sH = Math.min(h * scaleY, elHeight - sY),\n      x = -w / 2,\n      y = -h / 2,\n      maxDestW = Math.min(w, elWidth / scaleX - cropX),\n      maxDestH = Math.min(h, elHeight / scaleY - cropY);\n\n    //*PMW* if video apply filter on each frame draw\n    if (this._element.nodeName === 'VIDEO') {\n      elementToDraw = this._applyVideoFilter(this._element as HTMLVideoElement);\n    }\n\n    elementToDraw &&\n      ctx.drawImage(elementToDraw, sX, sY, sW, sH, x, y, maxDestW, maxDestH);\n  }\n\n  /**\n   * *PMW* function added\n   * Applies filter of video element using webgl backend\n   * @param elementToDraw\n   * @return {*|CanvasElement}\n   * @private\n   */\n  _applyVideoFilter(elementToDraw: HTMLVideoElement) {\n    let filters = this.filters || [];\n    filters = filters.filter(function (filter) {\n      return filter;\n    });\n\n    if (filters.length === 0) {\n      this._element = this._originalElement;\n      this._filteredEl = undefined;\n      this._filterScalingX = 1;\n      this._filterScalingY = 1;\n      return this._element;\n    }\n\n    const videoEl = elementToDraw,\n      sourceWidth =  videoEl.width,\n      sourceHeight = videoEl.height;\n\n    if (this._element === videoEl) {\n      // if the element is the same we need to create a new element\n      const canvasEl = createCanvasElementFor({\n        width: sourceWidth,\n        height: sourceHeight,\n      });\n      this._element = canvasEl;\n      this._filteredEl = canvasEl;\n    } else {\n      // clear the existing element to get new filter data\n      (this._element as HTMLCanvasElement).getContext('2d')?.clearRect(0, 0, sourceWidth, sourceHeight);\n    }\n\n    getFilterBackend().applyFilters(\n      filters,\n      this._originalElement,\n      sourceWidth,\n      sourceHeight,\n      this._element as HTMLCanvasElement,\n    );\n\n    if (\n      this._originalElement.width !== this._element.width ||\n      this._originalElement.height !== this._element.height\n    ) {\n      this._filterScalingX = this._element.width / this._originalElement.width;\n      this._filterScalingY =\n        this._element.height / this._originalElement.height;\n    }\n\n    const modifiedElementToDraw = this._element;\n    this._element = videoEl;\n    return modifiedElementToDraw;\n  }\n\n  /**\n   * needed to check if image needs resize\n   * @private\n   */\n  _needsResize() {\n    const scale = this.getTotalObjectScaling();\n    return scale.x !== this._lastScaleX || scale.y !== this._lastScaleY;\n  }\n\n  /**\n   * @private\n   * @deprecated unused\n   */\n  _resetWidthHeight() {\n    this.set(this.getOriginalSize());\n  }\n\n  /**\n   * @private\n   * Set the width and the height of the image object, using the element or the\n   * options.\n   */\n  _setWidthHeight({ width, height }: Partial<TSize> = {}) {\n    const size = this.getOriginalSize();\n    this.width = width || size.width;\n    this.height = height || size.height;\n  }\n\n  /**\n   * Calculate offset for center and scale factor for the image in order to respect\n   * the preserveAspectRatio attribute\n   * @private\n   */\n  parsePreserveAspectRatioAttribute() {\n    const pAR = parsePreserveAspectRatioAttribute(\n        this.preserveAspectRatio || '',\n      ),\n      pWidth = this.width,\n      pHeight = this.height,\n      parsedAttributes = { width: pWidth, height: pHeight };\n    let rWidth = this._element.width,\n      rHeight = this._element.height,\n      scaleX = 1,\n      scaleY = 1,\n      offsetLeft = 0,\n      offsetTop = 0,\n      cropX = 0,\n      cropY = 0,\n      offset;\n\n    if (pAR && (pAR.alignX !== NONE || pAR.alignY !== NONE)) {\n      if (pAR.meetOrSlice === 'meet') {\n        scaleX = scaleY = findScaleToFit(this._element, parsedAttributes);\n        offset = (pWidth - rWidth * scaleX) / 2;\n        if (pAR.alignX === 'Min') {\n          offsetLeft = -offset;\n        }\n        if (pAR.alignX === 'Max') {\n          offsetLeft = offset;\n        }\n        offset = (pHeight - rHeight * scaleY) / 2;\n        if (pAR.alignY === 'Min') {\n          offsetTop = -offset;\n        }\n        if (pAR.alignY === 'Max') {\n          offsetTop = offset;\n        }\n      }\n      if (pAR.meetOrSlice === 'slice') {\n        scaleX = scaleY = findScaleToCover(this._element, parsedAttributes);\n        offset = rWidth - pWidth / scaleX;\n        if (pAR.alignX === 'Mid') {\n          cropX = offset / 2;\n        }\n        if (pAR.alignX === 'Max') {\n          cropX = offset;\n        }\n        offset = rHeight - pHeight / scaleY;\n        if (pAR.alignY === 'Mid') {\n          cropY = offset / 2;\n        }\n        if (pAR.alignY === 'Max') {\n          cropY = offset;\n        }\n        rWidth = pWidth / scaleX;\n        rHeight = pHeight / scaleY;\n      }\n    } else {\n      scaleX = pWidth / rWidth;\n      scaleY = pHeight / rHeight;\n    }\n    return {\n      width: rWidth,\n      height: rHeight,\n      scaleX,\n      scaleY,\n      offsetLeft,\n      offsetTop,\n      cropX,\n      cropY,\n    };\n  }\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link FabricImage.fromElement})\n   * @static\n   * @see {@link http://www.w3.org/TR/SVG/struct.html#ImageElement}\n   */\n  static ATTRIBUTE_NAMES = [\n    ...SHARED_ATTRIBUTES,\n    'x',\n    'y',\n    'width',\n    'height',\n    'preserveAspectRatio',\n    'xlink:href',\n    'href',\n    'crossOrigin',\n    'image-rendering',\n  ];\n\n  /**\n   * Creates an instance of FabricImage from its object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {object} [options] Options object\n   * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<FabricImage>}\n   */\n  static fromObject<T extends TOptions<SerializedImageProps>>(\n    { filters: f, resizeFilter: rf, src, crossOrigin, type, ...object }: T,\n    options?: Abortable,\n  ) {\n    return Promise.all([\n      loadImage(src!, { ...options, crossOrigin }),\n      f && enlivenObjects<BaseFilter<string>>(f, options),\n      // redundant - handled by enlivenObjectEnlivables, but nicely explicit\n      rf ? enlivenObjects<Resize>([rf], options) : [],\n      enlivenObjectEnlivables(object, options),\n    ]).then(([el, filters = [], [resizeFilter], hydratedProps = {}]) => {\n      return new this(el, {\n        ...object,\n        // TODO: passing src creates a difference between image creation and restoring from JSON\n        src,\n        filters,\n        resizeFilter,\n        ...hydratedProps,\n      });\n    });\n  }\n\n  /**\n   * Creates an instance of Image from an URL string\n   * @static\n   * @param {String} url URL to create an image from\n   * @param {LoadImageOptions} [options] Options object\n   * @returns {Promise<FabricImage>}\n   */\n  static fromURL<T extends TOptions<ImageProps>>(\n    url: string,\n    { crossOrigin = null, signal }: LoadImageOptions = {},\n    imageOptions?: T,\n  ): Promise<FabricImage> {\n    return loadImage(url, { crossOrigin, signal }).then(\n      (img) => new this(img, imageOptions),\n    );\n  }\n\n  /**\n   * Returns {@link FabricImage} instance from an SVG element\n   * @static\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Options object\n   * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @param {Function} callback Callback to execute when Image object is created\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable = {},\n    cssRules?: CSSRules,\n  ) {\n    const parsedAttributes = parseAttributes(\n      element,\n      this.ATTRIBUTE_NAMES,\n      cssRules,\n    );\n    return this.fromURL(\n      parsedAttributes['xlink:href'] || parsedAttributes['href'],\n      options,\n      parsedAttributes,\n    ).catch((err) => {\n      log('log', 'Unable to parse Image', err);\n      return null;\n    });\n  }\n}\n\nclassRegistry.setClass(FabricImage);\nclassRegistry.setSVGClass(FabricImage);\n"],"names":["imageDefaultValues","strokeWidth","srcFromAttribute","minimumScaleTrigger","cropX","cropY","imageSmoothing","IMAGE_PROPS","FabricImage","FabricObject","getDefaults","super","ownDefaults","constructor","arg0","options","_defineProperty","this","filters","Object","assign","setOptions","cacheKey","uid","setElement","canvas","getDocumentFromElement","getElement","getFabricDocument","getElementById","_element","element","size","arguments","length","undefined","removeTexture","_originalElement","_setWidthHeight","applyFilters","resizeFilter","applyResizeFilters","key","backend","getFilterBackend","WebGLFilterBackend","evictCachesForKey","dispose","_cacheContext","forEach","elementKey","el","getEnv","getCrossOrigin","crossOrigin","getOriginalSize","width","naturalWidth","height","naturalHeight","_stroke","ctx","stroke","w","h","beginPath","moveTo","lineTo","closePath","toObject","propertiesToInclude","filterObj","push","src","getSrc","hasCrop","_toSVG","imageMarkup","x","y","svgString","strokeSvg","clipPath","imageRendering","clipPathId","getSvgSrc","strokeDashArray","origFill","fill","getSvgStyles","paintFirst","FILL","concat","filtered","toDataURL","getAttribute","setSrc","signal","loadImage","then","img","set","toString","filter","minimumScale","objectScale","getTotalObjectScaling","scaleX","scaleY","elementToFilter","_filteredEl","group","_filterScalingX","_filterScalingY","_lastScaleX","_lastScaleY","canvasEl","createCanvasElementFor","isNeutralState","imgElement","sourceWidth","sourceHeight","nodeName","getContext","clearRect","_render","imageSmoothingEnabled","isMoving","_needsResize","_renderPaintInOrder","drawCacheOnCanvas","shouldCache","needsItsOwnCache","_renderFill","elementToDraw","Math","max","elWidth","elHeight","sX","sY","sW","min","sH","maxDestW","maxDestH","_applyVideoFilter","drawImage","videoEl","_getContext","modifiedElementToDraw","scale","_resetWidthHeight","parsePreserveAspectRatioAttribute","pAR","preserveAspectRatio","pWidth","pHeight","parsedAttributes","offset","rWidth","rHeight","offsetLeft","offsetTop","alignX","NONE","alignY","meetOrSlice","findScaleToFit","findScaleToCover","fromObject","_ref","f","rf","type","object","Promise","all","enlivenObjects","enlivenObjectEnlivables","_ref2","hydratedProps","fromURL","url","imageOptions","fromElement","cssRules","parseAttributes","ATTRIBUTE_NAMES","catch","err","log","cacheProperties","SHARED_ATTRIBUTES","classRegistry","setClass","setSVGClass"],"mappings":"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"}