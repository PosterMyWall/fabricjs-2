import{reNewline as t}from"../../constants.min.mjs";import{cloneStyles as e}from"../internals/cloneStyles.min.mjs";import{graphemeSplit as n}from"../lang_string.min.mjs";const o=function(t,e){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return t.fill!==e.fill||t.stroke!==e.stroke||t.strokeWidth!==e.strokeWidth||t.fontSize!==e.fontSize||t.fontFamily!==e.fontFamily||t.fontWeight!==e.fontWeight||t.fontStyle!==e.fontStyle||t.textBackgroundColor!==e.textBackgroundColor||t.deltaY!==e.deltaY||n&&(t.overline!==e.overline||t.underline!==e.underline||t.linethrough!==e.linethrough)},l=(t,l)=>{const r=l.split("\n"),i=[];let s=-1,f={};t=e(t);for(let e=0;e<r.length;e++){const l=n(r[e]);if(t[e])for(let n=0;n<l.length;n++){s++;const l=t[e][n];l&&Object.keys(l).length>0&&(o(f,l,!0)?i.push({start:s,end:s+1,style:l}):i[i.length-1].end++),f=l||{}}else s+=l.length,f={}}return i},r=(o,l)=>{if(!Array.isArray(o))return e(o);const r=l.split(t),i={};let s=-1,f=0;for(let t=0;t<r.length;t++){const e=n(r[t]);for(let n=0;n<e.length;n++)s++,o[f]&&o[f].start<=s&&s<o[f].end&&(i[t]=i[t]||{},i[t][n]={...o[f].style},s===o[f].end-1&&f++)}return i};export{o as hasStyleChanged,r as stylesFromArray,l as stylesToArray};
//# sourceMappingURL=textStyles.min.mjs.map
