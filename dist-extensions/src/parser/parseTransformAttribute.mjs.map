{"version":3,"file":"parseTransformAttribute.mjs","sources":["../../../src/parser/parseTransformAttribute.ts"],"sourcesContent":["import { ROTATE, SCALE, SKEW_X, SKEW_Y, iMatrix } from '../constants';\nimport { reNum } from './constants';\nimport type { TMat2D } from '../typedefs';\nimport { cleanupSvgAttribute } from '../util/internals/cleanupSvgAttribute';\nimport {\n  createRotateMatrix,\n  createScaleMatrix,\n  createSkewXMatrix,\n  createSkewYMatrix,\n  createTranslateMatrix,\n  multiplyTransformMatrixArray,\n} from '../util/misc/matrix';\n\n// == begin transform regexp\nconst p = `(${reNum})`;\nconst skewX = String.raw`(skewX)\\(${p}\\)`;\nconst skewY = String.raw`(skewY)\\(${p}\\)`;\nconst rotate = String.raw`(rotate)\\(${p}(?: ${p} ${p})?\\)`;\nconst scale = String.raw`(scale)\\(${p}(?: ${p})?\\)`;\nconst translate = String.raw`(translate)\\(${p}(?: ${p})?\\)`;\nconst matrix = String.raw`(matrix)\\(${p} ${p} ${p} ${p} ${p} ${p}\\)`;\nconst transform = `(?:${matrix}|${translate}|${rotate}|${scale}|${skewX}|${skewY})`;\nconst transforms = `(?:${transform}*)`;\nconst transformList = String.raw`^\\s*(?:${transforms}?)\\s*$`;\n// http://www.w3.org/TR/SVG/coords.html#TransformAttribute\nconst reTransformList = new RegExp(transformList);\nconst reTransform = new RegExp(transform);\nconst reTransformAll = new RegExp(transform, 'g');\n// == end transform regexp\n\n/**\n * Parses \"transform\" attribute, returning an array of values\n * @static\n * @function\n * @memberOf fabric\n * @param {String} attributeValue String containing attribute value\n * @return {TTransformMatrix} Array of 6 elements representing transformation matrix\n */\nexport function parseTransformAttribute(attributeValue: string): TMat2D {\n  // first we clean the string\n  attributeValue = cleanupSvgAttribute(attributeValue)\n    // remove spaces around front parentheses\n    .replace(/\\s*([()])\\s*/gi, '$1');\n\n  // start with identity matrix\n  const matrices: TMat2D[] = [];\n\n  // return if no argument was given or\n  // an argument does not match transform attribute regexp\n  if (\n    !attributeValue ||\n    (attributeValue && !reTransformList.test(attributeValue))\n  ) {\n    return [...iMatrix];\n  }\n\n  for (const match of attributeValue.matchAll(reTransformAll)) {\n    const transformMatch = reTransform.exec(match[0]);\n    if (!transformMatch) {\n      continue;\n    }\n    let matrix: TMat2D = iMatrix;\n    const matchedParams = transformMatch.filter((m) => !!m);\n    const [, operation, ...rawArgs] = matchedParams;\n    const [arg0, arg1, arg2, arg3, arg4, arg5] = rawArgs.map((arg) =>\n      parseFloat(arg),\n    );\n\n    switch (operation) {\n      case 'translate':\n        matrix = createTranslateMatrix(arg0, arg1);\n        break;\n      case ROTATE:\n        matrix = createRotateMatrix({ angle: arg0 }, { x: arg1, y: arg2 });\n        break;\n      case SCALE:\n        matrix = createScaleMatrix(arg0, arg1);\n        break;\n      case SKEW_X:\n        matrix = createSkewXMatrix(arg0);\n        break;\n      case SKEW_Y:\n        matrix = createSkewYMatrix(arg0);\n        break;\n      case 'matrix':\n        matrix = [arg0, arg1, arg2, arg3, arg4, arg5];\n        break;\n    }\n\n    // snapshot current matrix into matrices array\n    matrices.push(matrix);\n  }\n\n  return multiplyTransformMatrixArray(matrices);\n}\n"],"names":["p","reNum","skewX","String","raw","skewY","rotate","scale","translate","matrix","transform","transforms","transformList","reTransformList","RegExp","reTransform","reTransformAll","parseTransformAttribute","attributeValue","cleanupSvgAttribute","replace","matrices","test","iMatrix","match","matchAll","transformMatch","exec","matchedParams","filter","m","operation","rawArgs","arg0","arg1","arg2","arg3","arg4","arg5","map","arg","parseFloat","createTranslateMatrix","ROTATE","createRotateMatrix","angle","x","y","SCALE","createScaleMatrix","SKEW_X","createSkewXMatrix","SKEW_Y","createSkewYMatrix","push","multiplyTransformMatrixArray"],"mappings":"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"}