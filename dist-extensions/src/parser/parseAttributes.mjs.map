{"version":3,"file":"parseAttributes.mjs","sources":["../../../src/parser/parseAttributes.ts"],"sourcesContent":["import { DEFAULT_SVG_FONT_SIZE } from '../constants';\nimport { parseUnit } from '../util/misc/svgParsing';\nimport { cPath, fSize, svgValidParentsRegEx } from './constants';\nimport { getGlobalStylesForElement } from './getGlobalStylesForElement';\nimport { normalizeAttr } from './normalizeAttr';\nimport { normalizeValue } from './normalizeValue';\nimport { parseFontDeclaration } from './parseFontDeclaration';\nimport { parseStyleAttribute } from './parseStyleAttribute';\nimport { setStrokeFillOpacity } from './setStrokeFillOpacity';\nimport type { CSSRules } from './typedefs';\n\n/**\n * Returns an object of attributes' name/value, given element and an array of attribute names;\n * Parses parent \"g\" nodes recursively upwards.\n * @param {SVGElement | HTMLElement} element Element to parse\n * @param {Array} attributes Array of attributes to parse\n * @return {Object} object containing parsed attributes' names/values\n */\nexport function parseAttributes(\n  element: HTMLElement | null,\n  attributes: string[],\n  cssRules?: CSSRules,\n): Record<string, any> {\n  if (!element) {\n    return {};\n  }\n\n  let parentAttributes: Record<string, string> = {},\n    fontSize: number,\n    parentFontSize = DEFAULT_SVG_FONT_SIZE;\n\n  // if there's a parent container (`g` or `a` or `symbol` node), parse its attributes recursively upwards\n  if (\n    element.parentNode &&\n    svgValidParentsRegEx.test(element.parentNode.nodeName)\n  ) {\n    parentAttributes = parseAttributes(\n      element.parentElement,\n      attributes,\n      cssRules,\n    );\n    if (parentAttributes.fontSize) {\n      fontSize = parentFontSize = parseUnit(parentAttributes.fontSize);\n    }\n  }\n\n  const ownAttributes: Record<string, string> = {\n    ...attributes.reduce<Record<string, string>>((memo, attr) => {\n      const value = element.getAttribute(attr);\n      if (value) {\n        memo[attr] = value;\n      }\n      return memo;\n    }, {}),\n    // add values parsed from style, which take precedence over attributes\n    // (see: http://www.w3.org/TR/SVG/styling.html#UsingPresentationAttributes)\n    ...getGlobalStylesForElement(element, cssRules),\n    ...parseStyleAttribute(element),\n  };\n\n  if (ownAttributes[cPath]) {\n    element.setAttribute(cPath, ownAttributes[cPath]);\n  }\n  if (ownAttributes[fSize]) {\n    // looks like the minimum should be 9px when dealing with ems. this is what looks like in browsers.\n    fontSize = parseUnit(ownAttributes[fSize], parentFontSize);\n    ownAttributes[fSize] = `${fontSize}`;\n  }\n\n  // this should have its own complex type\n  const normalizedStyle: Record<\n    string,\n    string | boolean | number | number[] | null\n  > = {};\n  for (const attr in ownAttributes) {\n    const normalizedAttr = normalizeAttr(attr);\n    const normalizedValue = normalizeValue(\n      normalizedAttr,\n      ownAttributes[attr],\n      parentAttributes,\n      fontSize!,\n    );\n    normalizedStyle[normalizedAttr] = normalizedValue;\n  }\n  if (normalizedStyle && normalizedStyle.font) {\n    parseFontDeclaration(normalizedStyle.font as string, normalizedStyle);\n  }\n  const mergedAttrs = { ...parentAttributes, ...normalizedStyle };\n  return svgValidParentsRegEx.test(element.nodeName)\n    ? mergedAttrs\n    : setStrokeFillOpacity(mergedAttrs);\n}\n"],"names":["parseAttributes","element","attributes","cssRules","parentAttributes","fontSize","parentFontSize","DEFAULT_SVG_FONT_SIZE","parentNode","svgValidParentsRegEx","test","nodeName","parentElement","parseUnit","ownAttributes","reduce","memo","attr","value","getAttribute","getGlobalStylesForElement","parseStyleAttribute","cPath","setAttribute","fSize","normalizedStyle","normalizedAttr","normalizeAttr","normalizedValue","normalizeValue","font","parseFontDeclaration","mergedAttrs","setStrokeFillOpacity"],"mappings":";;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,eAAeA,CAC7BC,OAA2B,EAC3BC,UAAoB,EACpBC,QAAmB,EACE;EACrB,IAAI,CAACF,OAAO,EAAE;AACZ,IAAA,OAAO,EAAE;AACX;EAEA,IAAIG,gBAAwC,GAAG,EAAE;IAC/CC,QAAgB;AAChBC,IAAAA,cAAc,GAAGC,qBAAqB;;AAExC;AACA,EAAA,IACEN,OAAO,CAACO,UAAU,IAClBC,oBAAoB,CAACC,IAAI,CAACT,OAAO,CAACO,UAAU,CAACG,QAAQ,CAAC,EACtD;IACAP,gBAAgB,GAAGJ,eAAe,CAChCC,OAAO,CAACW,aAAa,EACrBV,UAAU,EACVC,QACF,CAAC;IACD,IAAIC,gBAAgB,CAACC,QAAQ,EAAE;MAC7BA,QAAQ,GAAGC,cAAc,GAAGO,SAAS,CAACT,gBAAgB,CAACC,QAAQ,CAAC;AAClE;AACF;AAEA,EAAA,MAAMS,aAAqC,GAAG;IAC5C,GAAGZ,UAAU,CAACa,MAAM,CAAyB,CAACC,IAAI,EAAEC,IAAI,KAAK;AAC3D,MAAA,MAAMC,KAAK,GAAGjB,OAAO,CAACkB,YAAY,CAACF,IAAI,CAAC;AACxC,MAAA,IAAIC,KAAK,EAAE;AACTF,QAAAA,IAAI,CAACC,IAAI,CAAC,GAAGC,KAAK;AACpB;AACA,MAAA,OAAOF,IAAI;KACZ,EAAE,EAAE,CAAC;AACN;AACA;AACA,IAAA,GAAGI,yBAAyB,CAACnB,OAAO,EAAEE,QAAQ,CAAC;IAC/C,GAAGkB,mBAAmB,CAACpB,OAAO;GAC/B;AAED,EAAA,IAAIa,aAAa,CAACQ,KAAK,CAAC,EAAE;IACxBrB,OAAO,CAACsB,YAAY,CAACD,KAAK,EAAER,aAAa,CAACQ,KAAK,CAAC,CAAC;AACnD;AACA,EAAA,IAAIR,aAAa,CAACU,KAAK,CAAC,EAAE;AACxB;IACAnB,QAAQ,GAAGQ,SAAS,CAACC,aAAa,CAACU,KAAK,CAAC,EAAElB,cAAc,CAAC;AAC1DQ,IAAAA,aAAa,CAACU,KAAK,CAAC,GAAG,CAAA,EAAGnB,QAAQ,CAAE,CAAA;AACtC;;AAEA;EACA,MAAMoB,eAGL,GAAG,EAAE;AACN,EAAA,KAAK,MAAMR,IAAI,IAAIH,aAAa,EAAE;AAChC,IAAA,MAAMY,cAAc,GAAGC,aAAa,CAACV,IAAI,CAAC;AAC1C,IAAA,MAAMW,eAAe,GAAGC,cAAc,CACpCH,cAAc,EACdZ,aAAa,CAACG,IAAI,CAAC,EACnBb,gBAAgB,EAChBC,QACF,CAAC;AACDoB,IAAAA,eAAe,CAACC,cAAc,CAAC,GAAGE,eAAe;AACnD;AACA,EAAA,IAAIH,eAAe,IAAIA,eAAe,CAACK,IAAI,EAAE;AAC3CC,IAAAA,oBAAoB,CAACN,eAAe,CAACK,IAAI,EAAYL,eAAe,CAAC;AACvE;AACA,EAAA,MAAMO,WAAW,GAAG;AAAE,IAAA,GAAG5B,gBAAgB;IAAE,GAAGqB;GAAiB;AAC/D,EAAA,OAAOhB,oBAAoB,CAACC,IAAI,CAACT,OAAO,CAACU,QAAQ,CAAC,GAC9CqB,WAAW,GACXC,oBAAoB,CAACD,WAAW,CAAC;AACvC;;;;"}