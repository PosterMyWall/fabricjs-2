{"version":3,"file":"ITextBehavior.mjs","sources":["../../../../src/shapes/IText/ITextBehavior.ts"],"sourcesContent":["import type { ObjectEvents, TPointerEvent } from '../../EventTypeDefs';\nimport { Point } from '../../Point';\nimport type { FabricObject } from '../Object/FabricObject';\nimport { FabricText } from '../Text/Text';\nimport { animate } from '../../util/animation/animate';\nimport type { TOnAnimationChangeCallback } from '../../util/animation/types';\nimport type { ValueAnimation } from '../../util/animation/ValueAnimation';\nimport type { TextStyleDeclaration } from '../Text/StyledText';\nimport type { SerializedTextProps, TextProps } from '../Text/Text';\nimport type { TOptions } from '../../typedefs';\nimport { getDocumentFromElement } from '../../util/dom_misc';\nimport { LEFT, MODIFIED, RIGHT, reNewline } from '../../constants';\nimport type { IText } from './IText';\n\n/**\n *  extend this regex to support non english languages\n *\n *  - ` `      Matches a SPACE character (char code 32).\n *  - `\\n`     Matches a LINE FEED character (char code 10).\n *  - `\\.`     Matches a \".\" character (char code 46).\n *  - `,`      Matches a \",\" character (char code 44).\n *  - `;`      Matches a \";\" character (char code 59).\n *  - `!`      Matches a \"!\" character (char code 33).\n *  - `\\?`     Matches a \"?\" character (char code 63).\n *  - `\\-`     Matches a \"-\" character (char code 45).\n */\n// eslint-disable-next-line no-useless-escape\nconst reNonWord = /[ \\n\\.,;!\\?\\-]/;\n\nexport type ITextEvents = ObjectEvents & {\n  'selection:changed': never;\n  changed: never | { index: number; action: string };\n  'editing:entered': never | { e: TPointerEvent };\n  'editing:exited': never;\n};\n\nexport abstract class ITextBehavior<\n  Props extends TOptions<TextProps> = Partial<TextProps>,\n  SProps extends SerializedTextProps = SerializedTextProps,\n  EventSpec extends ITextEvents = ITextEvents,\n> extends FabricText<Props, SProps, EventSpec> {\n  declare abstract isEditing: boolean;\n  declare abstract cursorDelay: number;\n  declare abstract selectionStart: number;\n  declare abstract selectionEnd: number;\n  declare abstract cursorDuration: number;\n  declare abstract editable: boolean;\n  declare abstract column: number;\n  declare abstract dataType: string;\n  declare abstract editingBorderColor: string;\n\n  declare abstract compositionStart: number;\n  declare abstract compositionEnd: number;\n\n  declare abstract hiddenTextarea: HTMLTextAreaElement | null;\n\n  /**\n   * Helps determining when the text is in composition, so that the cursor\n   * rendering is altered.\n   */\n  declare protected inCompositionMode: boolean;\n\n  declare protected _reSpace: RegExp;\n  declare private _currentTickState?: ValueAnimation;\n  declare private _currentTickCompleteState?: ValueAnimation;\n  protected _currentCursorOpacity = 1;\n  declare private _textBeforeEdit: string;\n  declare protected __selectionStartOnMouseDown: number;\n\n  /**\n   * Keeps track if the IText object was selected before the actual click.\n   * This because we want to delay enter editing by a click.\n   */\n  declare protected selected: boolean;\n  declare protected cursorOffsetCache: { left?: number; top?: number };\n  declare protected _savedProps?: {\n    hasControls: boolean;\n    borderColor: string;\n    lockMovementX: boolean;\n    lockMovementY: boolean;\n    selectable: boolean;\n    hoverCursor: CSSStyleDeclaration['cursor'] | null;\n    defaultCursor?: CSSStyleDeclaration['cursor'];\n    moveCursor?: CSSStyleDeclaration['cursor'];\n  };\n  declare protected _selectionDirection: 'left' | 'right' | null;\n\n  abstract initHiddenTextarea(): void;\n  abstract _fireSelectionChanged(): void;\n  abstract renderCursorOrSelection(): void;\n  abstract getSelectionStartFromPointer(e: TPointerEvent): number;\n  abstract _getCursorBoundaries(\n    index: number,\n    skipCaching?: boolean,\n  ): {\n    left: number;\n    top: number;\n    leftOffset: number;\n    topOffset: number;\n  };\n\n  /**\n   * Initializes all the interactive behavior of IText\n   */\n  initBehavior() {\n    this._tick = this._tick.bind(this);\n    this._onTickComplete = this._onTickComplete.bind(this);\n    this.updateSelectionOnMouseMove =\n      this.updateSelectionOnMouseMove.bind(this);\n  }\n\n  onDeselect(options?: { e?: TPointerEvent; object?: FabricObject }) {\n    this.isEditing && this.exitEditing();\n    this.selected = false;\n    return super.onDeselect(options);\n  }\n\n  /**\n   * @private\n   */\n  _animateCursor({\n    toValue,\n    duration,\n    delay,\n    onComplete,\n  }: {\n    toValue: number;\n    duration: number;\n    delay?: number;\n    onComplete?: TOnAnimationChangeCallback<number>;\n  }) {\n    return animate({\n      startValue: this._currentCursorOpacity,\n      endValue: toValue,\n      duration,\n      delay,\n      onComplete,\n      abort: () =>\n        !this.canvas ||\n        // we do not want to animate a selection, only cursor\n        this.selectionStart !== this.selectionEnd,\n      onChange: (value) => {\n        this._currentCursorOpacity = value;\n        this.renderCursorOrSelection();\n      },\n    });\n  }\n\n  /**\n   * changes the cursor from visible to invisible\n   */\n  private _tick(delay?: number) {\n    this._currentTickState = this._animateCursor({\n      toValue: 0,\n      duration: this.cursorDuration / 2,\n      delay: Math.max(delay || 0, 100),\n      onComplete: this._onTickComplete,\n    });\n  }\n\n  /**\n   * Changes the cursor from invisible to visible\n   */\n  private _onTickComplete() {\n    this._currentTickCompleteState?.abort();\n    this._currentTickCompleteState = this._animateCursor({\n      toValue: 1,\n      duration: this.cursorDuration,\n      onComplete: this._tick,\n    });\n  }\n\n  /**\n   * Initializes delayed cursor\n   */\n  initDelayedCursor(restart?: boolean) {\n    this.abortCursorAnimation();\n    this._tick(restart ? 0 : this.cursorDelay);\n  }\n\n  /**\n   * Aborts cursor animation, clears all timeouts and clear textarea context if necessary\n   */\n  abortCursorAnimation() {\n    let shouldClear = false;\n    [this._currentTickState, this._currentTickCompleteState].forEach(\n      (cursorAnimation) => {\n        if (cursorAnimation && !cursorAnimation.isDone()) {\n          shouldClear = true;\n          cursorAnimation.abort();\n        }\n      },\n    );\n\n    this._currentCursorOpacity = 1;\n\n    //  make sure we clear context even if instance is not editing\n    if (shouldClear) {\n      this.clearContextTop();\n    }\n  }\n\n  /**\n   * Restart tue cursor animation if either is in complete state ( between animations )\n   * or if it never started before\n   */\n  restartCursorIfNeeded() {\n    if (\n      [this._currentTickState, this._currentTickCompleteState].some(\n        (cursorAnimation) => !cursorAnimation || cursorAnimation.isDone(),\n      )\n    ) {\n      this.initDelayedCursor();\n    }\n  }\n\n  /**\n   * Selects entire text\n   */\n  selectAll() {\n    this.selectionStart = 0;\n    this.selectionEnd = this._text.length;\n    this._fireSelectionChanged();\n    this._updateTextarea();\n    return this;\n  }\n\n  /**\n   * Selects entire text and updates the visual state\n   */\n  cmdAll() {\n    this.selectAll();\n    this.renderCursorOrSelection();\n  }\n\n  /**\n   * Returns selected text\n   * @return {String}\n   */\n  getSelectedText(): string {\n    return this._text.slice(this.selectionStart, this.selectionEnd).join('');\n  }\n\n  /**\n   * Find new selection index representing start of current word according to current selection index\n   * @param {Number} startFrom Current selection index\n   * @return {Number} New selection index\n   */\n  findWordBoundaryLeft(startFrom: number): number {\n    let offset = 0,\n      index = startFrom - 1;\n\n    // remove space before cursor first\n    if (this._reSpace.test(this._text[index])) {\n      while (this._reSpace.test(this._text[index])) {\n        offset++;\n        index--;\n      }\n    }\n    while (/\\S/.test(this._text[index]) && index > -1) {\n      offset++;\n      index--;\n    }\n\n    return startFrom - offset;\n  }\n\n  /**\n   * Find new selection index representing end of current word according to current selection index\n   * @param {Number} startFrom Current selection index\n   * @return {Number} New selection index\n   */\n  findWordBoundaryRight(startFrom: number): number {\n    let offset = 0,\n      index = startFrom;\n\n    // remove space after cursor first\n    if (this._reSpace.test(this._text[index])) {\n      while (this._reSpace.test(this._text[index])) {\n        offset++;\n        index++;\n      }\n    }\n    while (/\\S/.test(this._text[index]) && index < this._text.length) {\n      offset++;\n      index++;\n    }\n\n    return startFrom + offset;\n  }\n\n  /**\n   * Find new selection index representing start of current line according to current selection index\n   * @param {Number} startFrom Current selection index\n   * @return {Number} New selection index\n   */\n  findLineBoundaryLeft(startFrom: number): number {\n    let offset = 0,\n      index = startFrom - 1;\n\n    while (!/\\n/.test(this._text[index]) && index > -1) {\n      offset++;\n      index--;\n    }\n\n    return startFrom - offset;\n  }\n\n  /**\n   * Find new selection index representing end of current line according to current selection index\n   * @param {Number} startFrom Current selection index\n   * @return {Number} New selection index\n   */\n  findLineBoundaryRight(startFrom: number): number {\n    let offset = 0,\n      index = startFrom;\n\n    while (!/\\n/.test(this._text[index]) && index < this._text.length) {\n      offset++;\n      index++;\n    }\n\n    return startFrom + offset;\n  }\n\n  /**\n   * Finds index corresponding to beginning or end of a word\n   * @param {Number} selectionStart Index of a character\n   * @param {Number} direction 1 or -1\n   * @return {Number} Index of the beginning or end of a word\n   */\n  searchWordBoundary(selectionStart: number, direction: 1 | -1): number {\n    const text = this._text;\n    // if we land on a space we move the cursor backwards\n    // if we are searching boundary end we move the cursor backwards ONLY if we don't land on a line break\n    let index =\n        selectionStart > 0 &&\n        this._reSpace.test(text[selectionStart]) &&\n        (direction === -1 || !reNewline.test(text[selectionStart - 1]))\n          ? selectionStart - 1\n          : selectionStart,\n      _char = text[index];\n    while (index > 0 && index < text.length && !reNonWord.test(_char)) {\n      index += direction;\n      _char = text[index];\n    }\n    if (direction === -1 && reNonWord.test(_char)) {\n      index++;\n    }\n    return index;\n  }\n\n  /**\n   * Selects the word that contains the char at index selectionStart\n   * @param {Number} selectionStart Index of a character\n   */\n  selectWord(selectionStart?: number) {\n    selectionStart = selectionStart ?? this.selectionStart;\n    // search backwards\n    const newSelectionStart = this.searchWordBoundary(selectionStart, -1),\n      // search forward\n      newSelectionEnd = Math.max(\n        newSelectionStart,\n        this.searchWordBoundary(selectionStart, 1),\n      );\n\n    this.selectionStart = newSelectionStart;\n    this.selectionEnd = newSelectionEnd;\n    this._fireSelectionChanged();\n    this._updateTextarea();\n    // remove next major, for now it renders twice :(\n    this.renderCursorOrSelection();\n  }\n\n  /**\n   * Selects the line that contains selectionStart\n   * @param {Number} selectionStart Index of a character\n   */\n  selectLine(selectionStart?: number) {\n    selectionStart = selectionStart ?? this.selectionStart;\n    const newSelectionStart = this.findLineBoundaryLeft(selectionStart),\n      newSelectionEnd = this.findLineBoundaryRight(selectionStart);\n\n    this.selectionStart = newSelectionStart;\n    this.selectionEnd = newSelectionEnd;\n    this._fireSelectionChanged();\n    this._updateTextarea();\n  }\n\n  /**\n   * Enters editing state\n   */\n  enterEditing(e?: TPointerEvent) {\n    if (this.isEditing || !this.editable) {\n      return;\n    }\n    this.enterEditingImpl();\n    this.fire('editing:entered', e ? { e } : undefined);\n    this._fireSelectionChanged();\n    if (this.canvas) {\n      this.canvas.fire('text:editing:entered', {\n        target: this as unknown as IText,\n        e,\n      });\n      this.canvas.requestRenderAll();\n    }\n  }\n\n  /**\n   * runs the actual logic that enter from editing state, see {@link enterEditing}\n   */\n  enterEditingImpl() {\n    if (this.canvas) {\n      this.canvas.calcOffset();\n      this.canvas.textEditingManager.exitTextEditing();\n    }\n\n    this.isEditing = true;\n\n    this.initHiddenTextarea();\n    this.hiddenTextarea!.focus();\n    this.hiddenTextarea!.value = this.text;\n    this._updateTextarea();\n    this._saveEditingProps();\n    this._setEditingProps();\n    this._textBeforeEdit = this.text;\n\n    this._tick();\n  }\n\n  /**\n   * called by {@link Canvas#textEditingManager}\n   */\n  updateSelectionOnMouseMove(e: TPointerEvent) {\n    if (this.getActiveControl()) {\n      return;\n    }\n\n    const el = this.hiddenTextarea!;\n    // regain focus\n    getDocumentFromElement(el).activeElement !== el && el.focus();\n\n    const newSelectionStart = this.getSelectionStartFromPointer(e),\n      currentStart = this.selectionStart,\n      currentEnd = this.selectionEnd;\n    if (\n      (newSelectionStart !== this.__selectionStartOnMouseDown ||\n        currentStart === currentEnd) &&\n      (currentStart === newSelectionStart || currentEnd === newSelectionStart)\n    ) {\n      return;\n    }\n    if (newSelectionStart > this.__selectionStartOnMouseDown) {\n      this.selectionStart = this.__selectionStartOnMouseDown;\n      this.selectionEnd = newSelectionStart;\n    } else {\n      this.selectionStart = newSelectionStart;\n      this.selectionEnd = this.__selectionStartOnMouseDown;\n    }\n    if (\n      this.selectionStart !== currentStart ||\n      this.selectionEnd !== currentEnd\n    ) {\n      this._fireSelectionChanged();\n      this._updateTextarea();\n      this.renderCursorOrSelection();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _setEditingProps() {\n    this.hoverCursor = 'text';\n\n    if (this.canvas) {\n      this.canvas.defaultCursor = this.canvas.moveCursor = 'text';\n    }\n\n    this.borderColor = this.editingBorderColor;\n    this.hasControls = this.selectable = false;\n    this.lockMovementX = this.lockMovementY = true;\n  }\n\n  /**\n   * convert from textarea to grapheme indexes\n   */\n  fromStringToGraphemeSelection(start: number, end: number, text: string) {\n    const smallerTextStart = text.slice(0, start),\n      graphemeStart = this.graphemeSplit(smallerTextStart).length;\n    if (start === end) {\n      return { selectionStart: graphemeStart, selectionEnd: graphemeStart };\n    }\n    const smallerTextEnd = text.slice(start, end),\n      graphemeEnd = this.graphemeSplit(smallerTextEnd).length;\n    return {\n      selectionStart: graphemeStart,\n      selectionEnd: graphemeStart + graphemeEnd,\n    };\n  }\n\n  /**\n   * convert from fabric to textarea values\n   */\n  fromGraphemeToStringSelection(\n    start: number,\n    end: number,\n    graphemes: string[],\n  ) {\n    const smallerTextStart = graphemes.slice(0, start),\n      graphemeStart = smallerTextStart.join('').length;\n    if (start === end) {\n      return { selectionStart: graphemeStart, selectionEnd: graphemeStart };\n    }\n    const smallerTextEnd = graphemes.slice(start, end),\n      graphemeEnd = smallerTextEnd.join('').length;\n    return {\n      selectionStart: graphemeStart,\n      selectionEnd: graphemeStart + graphemeEnd,\n    };\n  }\n\n  /**\n   * @private\n   */\n  _updateTextarea() {\n    this.cursorOffsetCache = {};\n    if (!this.hiddenTextarea) {\n      return;\n    }\n    if (!this.inCompositionMode) {\n      const newSelection = this.fromGraphemeToStringSelection(\n        this.selectionStart,\n        this.selectionEnd,\n        this._text,\n      );\n      this.hiddenTextarea.selectionStart = newSelection.selectionStart;\n      this.hiddenTextarea.selectionEnd = newSelection.selectionEnd;\n    }\n    this.updateTextareaPosition();\n  }\n\n  /**\n   * @private\n   */\n  updateFromTextArea() {\n    if (!this.hiddenTextarea) {\n      return;\n    }\n    this.cursorOffsetCache = {};\n    const textarea = this.hiddenTextarea;\n    this.text = textarea.value;\n    this.set('dirty', true);\n    this.initDimensions();\n    this.setCoords();\n    const newSelection = this.fromStringToGraphemeSelection(\n      textarea.selectionStart,\n      textarea.selectionEnd,\n      textarea.value,\n    );\n    this.selectionEnd = this.selectionStart = newSelection.selectionEnd;\n    if (!this.inCompositionMode) {\n      this.selectionStart = newSelection.selectionStart;\n    }\n    this.updateTextareaPosition();\n  }\n\n  /**\n   * @private\n   */\n  updateTextareaPosition() {\n    if (this.selectionStart === this.selectionEnd) {\n      const style = this._calcTextareaPosition();\n      this.hiddenTextarea!.style.left = style.left;\n      this.hiddenTextarea!.style.top = style.top;\n    }\n  }\n\n  /**\n   * @private\n   * @return {Object} style contains style for hiddenTextarea\n   */\n  _calcTextareaPosition() {\n    if (!this.canvas) {\n      return { left: '1px', top: '1px' };\n    }\n    const desiredPosition = this.inCompositionMode\n        ? this.compositionStart\n        : this.selectionStart,\n      boundaries = this._getCursorBoundaries(desiredPosition),\n      cursorLocation = this.get2DCursorLocation(desiredPosition),\n      lineIndex = cursorLocation.lineIndex,\n      charIndex = cursorLocation.charIndex,\n      charHeight =\n        this.getValueOfPropertyAt(lineIndex, charIndex, 'fontSize') *\n        this.lineHeight,\n      leftOffset = boundaries.leftOffset,\n      retinaScaling = this.getCanvasRetinaScaling(),\n      upperCanvas = this.canvas.upperCanvasEl,\n      upperCanvasWidth = upperCanvas.width / retinaScaling,\n      upperCanvasHeight = upperCanvas.height / retinaScaling,\n      maxWidth = upperCanvasWidth - charHeight,\n      maxHeight = upperCanvasHeight - charHeight;\n\n    const p = new Point(\n      boundaries.left + leftOffset,\n      boundaries.top + boundaries.topOffset + charHeight,\n    )\n      .transform(this.calcTransformMatrix())\n      .transform(this.canvas.viewportTransform)\n      .multiply(\n        new Point(\n          upperCanvas.clientWidth / upperCanvasWidth,\n          upperCanvas.clientHeight / upperCanvasHeight,\n        ),\n      );\n\n    if (p.x < 0) {\n      p.x = 0;\n    }\n    if (p.x > maxWidth) {\n      p.x = maxWidth;\n    }\n    if (p.y < 0) {\n      p.y = 0;\n    }\n    if (p.y > maxHeight) {\n      p.y = maxHeight;\n    }\n\n    // add canvas offset on document\n    p.x += this.canvas._offset.left;\n    p.y += this.canvas._offset.top;\n\n    return {\n      left: `${p.x}px`,\n      top: `${p.y}px`,\n      fontSize: `${charHeight}px`,\n      charHeight: charHeight,\n    };\n  }\n\n  /**\n   * @private\n   */\n  _saveEditingProps() {\n    this._savedProps = {\n      hasControls: this.hasControls,\n      borderColor: this.borderColor,\n      lockMovementX: this.lockMovementX,\n      lockMovementY: this.lockMovementY,\n      hoverCursor: this.hoverCursor,\n      selectable: this.selectable,\n      defaultCursor: this.canvas && this.canvas.defaultCursor,\n      moveCursor: this.canvas && this.canvas.moveCursor,\n    };\n  }\n\n  /**\n   * @private\n   */\n  _restoreEditingProps() {\n    if (!this._savedProps) {\n      return;\n    }\n\n    this.hoverCursor = this._savedProps.hoverCursor;\n    this.hasControls = this._savedProps.hasControls;\n    this.borderColor = this._savedProps.borderColor;\n    this.selectable = this._savedProps.selectable;\n    this.lockMovementX = this._savedProps.lockMovementX;\n    this.lockMovementY = this._savedProps.lockMovementY;\n\n    if (this.canvas) {\n      this.canvas.defaultCursor =\n        this._savedProps.defaultCursor || this.canvas.defaultCursor;\n      this.canvas.moveCursor =\n        this._savedProps.moveCursor || this.canvas.moveCursor;\n    }\n\n    delete this._savedProps;\n  }\n\n  /**\n   * runs the actual logic that exits from editing state, see {@link exitEditing}\n   * But it does not fire events\n   */\n  exitEditingImpl() {\n    const hiddenTextarea = this.hiddenTextarea;\n    this.selected = false;\n    this.isEditing = false;\n\n    if (hiddenTextarea) {\n      hiddenTextarea.blur && hiddenTextarea.blur();\n      hiddenTextarea.parentNode &&\n        hiddenTextarea.parentNode.removeChild(hiddenTextarea);\n    }\n    this.hiddenTextarea = null;\n    this.abortCursorAnimation();\n    this.selectionStart !== this.selectionEnd && this.clearContextTop();\n    this.selectionEnd = this.selectionStart;\n    this._restoreEditingProps();\n    if (this._forceClearCache) {\n      this.initDimensions();\n      this.setCoords();\n    }\n  }\n\n  /**\n   * Exits from editing state and fires relevant events\n   */\n  exitEditing() {\n    const isTextChanged = this._textBeforeEdit !== this.text;\n    this.exitEditingImpl();\n\n    this.fire('editing:exited');\n    isTextChanged && this.fire(MODIFIED);\n    if (this.canvas) {\n      this.canvas.fire('text:editing:exited', {\n        target: this as unknown as IText,\n      });\n      // todo: evaluate add an action to this event\n      isTextChanged && this.canvas.fire('object:modified', { target: this });\n    }\n    return this;\n  }\n\n  /**\n   * @private\n   */\n  _removeExtraneousStyles() {\n    for (const prop in this.styles) {\n      if (!this._textLines[prop as unknown as number]) {\n        delete this.styles[prop];\n      }\n    }\n  }\n\n  /**\n   * remove and reflow a style block from start to end.\n   * @param {Number} start linear start position for removal (included in removal)\n   * @param {Number} end linear end position for removal ( excluded from removal )\n   */\n  removeStyleFromTo(start: number, end: number) {\n    const { lineIndex: lineStart, charIndex: charStart } =\n        this.get2DCursorLocation(start, true),\n      { lineIndex: lineEnd, charIndex: charEnd } = this.get2DCursorLocation(\n        end,\n        true,\n      );\n    if (lineStart !== lineEnd) {\n      // step1 remove the trailing of lineStart\n      if (this.styles[lineStart]) {\n        for (\n          let i = charStart;\n          i < this._unwrappedTextLines[lineStart].length;\n          i++\n        ) {\n          delete this.styles[lineStart][i];\n        }\n      }\n      // step2 move the trailing of lineEnd to lineStart if needed\n      if (this.styles[lineEnd]) {\n        for (\n          let i = charEnd;\n          i < this._unwrappedTextLines[lineEnd].length;\n          i++\n        ) {\n          const styleObj = this.styles[lineEnd][i];\n          if (styleObj) {\n            this.styles[lineStart] || (this.styles[lineStart] = {});\n            this.styles[lineStart][charStart + i - charEnd] = styleObj;\n          }\n        }\n      }\n      // step3 detects lines will be completely removed.\n      for (let i = lineStart + 1; i <= lineEnd; i++) {\n        delete this.styles[i];\n      }\n      // step4 shift remaining lines.\n      this.shiftLineStyles(lineEnd, lineStart - lineEnd);\n    } else {\n      // remove and shift left on the same line\n      if (this.styles[lineStart]) {\n        const styleObj = this.styles[lineStart];\n        const diff = charEnd - charStart;\n        for (let i = charStart; i < charEnd; i++) {\n          delete styleObj[i];\n        }\n        for (const char in this.styles[lineStart]) {\n          const numericChar = parseInt(char, 10);\n          if (numericChar >= charEnd) {\n            styleObj[numericChar - diff] = styleObj[char];\n            delete styleObj[char];\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Shifts line styles up or down\n   * @param {Number} lineIndex Index of a line\n   * @param {Number} offset Can any number?\n   */\n  shiftLineStyles(lineIndex: number, offset: number) {\n    const clonedStyles = Object.assign({}, this.styles);\n    for (const line in this.styles) {\n      const numericLine = parseInt(line, 10);\n      if (numericLine > lineIndex) {\n        this.styles[numericLine + offset] = clonedStyles[numericLine];\n        if (!clonedStyles[numericLine - offset]) {\n          delete this.styles[numericLine];\n        }\n      }\n    }\n  }\n\n  /**\n   * Handle insertion of more consecutive style lines for when one or more\n   * newlines gets added to the text. Since current style needs to be shifted\n   * first we shift the current style of the number lines needed, then we add\n   * new lines from the last to the first.\n   * @param {Number} lineIndex Index of a line\n   * @param {Number} charIndex Index of a char\n   * @param {Number} qty number of lines to add\n   * @param {Array} copiedStyle Array of objects styles\n   */\n  insertNewlineStyleObject(\n    lineIndex: number,\n    charIndex: number,\n    qty: number,\n    copiedStyle?: { [index: number]: TextStyleDeclaration },\n  ) {\n    const newLineStyles: { [index: number]: TextStyleDeclaration } = {};\n    const originalLineLength = this._unwrappedTextLines[lineIndex].length;\n    const isEndOfLine = originalLineLength === charIndex;\n\n    let someStyleIsCarryingOver = false;\n    qty || (qty = 1);\n    this.shiftLineStyles(lineIndex, qty);\n    const currentCharStyle = this.styles[lineIndex]\n      ? this.styles[lineIndex][charIndex === 0 ? charIndex : charIndex - 1]\n      : undefined;\n\n    // we clone styles of all chars\n    // after cursor onto the current line\n    for (const index in this.styles[lineIndex]) {\n      const numIndex = parseInt(index, 10);\n      if (numIndex >= charIndex) {\n        someStyleIsCarryingOver = true;\n        newLineStyles[numIndex - charIndex] = this.styles[lineIndex][index];\n        // remove lines from the previous line since they're on a new line now\n        if (!(isEndOfLine && charIndex === 0)) {\n          delete this.styles[lineIndex][index];\n        }\n      }\n    }\n    let styleCarriedOver = false;\n    if (someStyleIsCarryingOver && !isEndOfLine) {\n      // if is end of line, the extra style we copied\n      // is probably not something we want\n      this.styles[lineIndex + qty] = newLineStyles;\n      styleCarriedOver = true;\n    }\n    if (styleCarriedOver || originalLineLength > charIndex) {\n      // skip the last line of since we already prepared it.\n      // or contains text without style that we don't want to style\n      // just because it changed lines\n      qty--;\n    }\n    // for the all the lines or all the other lines\n    // we clone current char style onto the next (otherwise empty) line\n    while (qty > 0) {\n      if (copiedStyle && copiedStyle[qty - 1]) {\n        this.styles[lineIndex + qty] = {\n          0: { ...copiedStyle[qty - 1] },\n        };\n      } else if (currentCharStyle) {\n        this.styles[lineIndex + qty] = {\n          0: { ...currentCharStyle },\n        };\n      } else {\n        delete this.styles[lineIndex + qty];\n      }\n      qty--;\n    }\n    this._forceClearCache = true;\n  }\n\n  /**\n   * Inserts style object for a given line/char index\n   * @param {Number} lineIndex Index of a line\n   * @param {Number} charIndex Index of a char\n   * @param {Number} quantity number Style object to insert, if given\n   * @param {Array} copiedStyle array of style objects\n   */\n  insertCharStyleObject(\n    lineIndex: number,\n    charIndex: number,\n    quantity: number,\n    copiedStyle?: TextStyleDeclaration[],\n  ) {\n    if (!this.styles) {\n      this.styles = {};\n    }\n    const currentLineStyles = this.styles[lineIndex],\n      currentLineStylesCloned = currentLineStyles\n        ? { ...currentLineStyles }\n        : {};\n\n    quantity || (quantity = 1);\n    // shift all char styles by quantity forward\n    // 0,1,2,3 -> (charIndex=2) -> 0,1,3,4 -> (insert 2) -> 0,1,2,3,4\n    for (const index in currentLineStylesCloned) {\n      const numericIndex = parseInt(index, 10);\n      if (numericIndex >= charIndex) {\n        currentLineStyles[numericIndex + quantity] =\n          currentLineStylesCloned[numericIndex];\n        // only delete the style if there was nothing moved there\n        if (!currentLineStylesCloned[numericIndex - quantity]) {\n          delete currentLineStyles[numericIndex];\n        }\n      }\n    }\n    this._forceClearCache = true;\n    if (copiedStyle) {\n      while (quantity--) {\n        if (!Object.keys(copiedStyle[quantity]).length) {\n          continue;\n        }\n        if (!this.styles[lineIndex]) {\n          this.styles[lineIndex] = {};\n        }\n        this.styles[lineIndex][charIndex + quantity] = {\n          ...copiedStyle[quantity],\n        };\n      }\n      return;\n    }\n    if (!currentLineStyles) {\n      return;\n    }\n    const newStyle = currentLineStyles[charIndex ? charIndex - 1 : 1];\n    while (newStyle && quantity--) {\n      this.styles[lineIndex][charIndex + quantity] = { ...newStyle };\n    }\n  }\n\n  /**\n   * Inserts style object(s)\n   * @param {Array} insertedText Characters at the location where style is inserted\n   * @param {Number} start cursor index for inserting style\n   * @param {Array} [copiedStyle] array of style objects to insert.\n   */\n  insertNewStyleBlock(\n    insertedText: string[],\n    start: number,\n    copiedStyle?: TextStyleDeclaration[],\n  ) {\n    const cursorLoc = this.get2DCursorLocation(start, true),\n      addedLines = [0];\n    let linesLength = 0;\n    // get an array of how many char per lines are being added.\n    for (let i = 0; i < insertedText.length; i++) {\n      if (insertedText[i] === '\\n') {\n        linesLength++;\n        addedLines[linesLength] = 0;\n      } else {\n        addedLines[linesLength]++;\n      }\n    }\n    // for the first line copy the style from the current char position.\n    if (addedLines[0] > 0) {\n      this.insertCharStyleObject(\n        cursorLoc.lineIndex,\n        cursorLoc.charIndex,\n        addedLines[0],\n        copiedStyle,\n      );\n      copiedStyle = copiedStyle && copiedStyle.slice(addedLines[0] + 1);\n    }\n    linesLength &&\n      this.insertNewlineStyleObject(\n        cursorLoc.lineIndex,\n        cursorLoc.charIndex + addedLines[0],\n        linesLength,\n      );\n    let i;\n    for (i = 1; i < linesLength; i++) {\n      if (addedLines[i] > 0) {\n        this.insertCharStyleObject(\n          cursorLoc.lineIndex + i,\n          0,\n          addedLines[i],\n          copiedStyle,\n        );\n      } else if (copiedStyle) {\n        // this test is required in order to close #6841\n        // when a pasted buffer begins with a newline then\n        // this.styles[cursorLoc.lineIndex + i] and copiedStyle[0]\n        // may be undefined for some reason\n        if (this.styles[cursorLoc.lineIndex + i] && copiedStyle[0]) {\n          this.styles[cursorLoc.lineIndex + i][0] = copiedStyle[0];\n        }\n      }\n      copiedStyle = copiedStyle && copiedStyle.slice(addedLines[i] + 1);\n    }\n    if (addedLines[i] > 0) {\n      this.insertCharStyleObject(\n        cursorLoc.lineIndex + i,\n        0,\n        addedLines[i],\n        copiedStyle,\n      );\n    }\n  }\n\n  /**\n   * Removes characters from start/end\n   * start/end ar per grapheme position in _text array.\n   *\n   * @param {Number} start\n   * @param {Number} end default to start + 1\n   */\n  removeChars(start: number, end: number = start + 1) {\n    this.removeStyleFromTo(start, end);\n    this._text.splice(start, end - start);\n    this.text = this._text.join('');\n    this.set('dirty', true);\n    this.initDimensions();\n    this.setCoords();\n    this._removeExtraneousStyles();\n  }\n\n  /**\n   * insert characters at start position, before start position.\n   * start  equal 1 it means the text get inserted between actual grapheme 0 and 1\n   * if style array is provided, it must be as the same length of text in graphemes\n   * if end is provided and is bigger than start, old text is replaced.\n   * start/end ar per grapheme position in _text array.\n   *\n   * @param {String} text text to insert\n   * @param {Array} style array of style objects\n   * @param {Number} start\n   * @param {Number} end default to start + 1\n   */\n  insertChars(\n    text: string,\n    style: TextStyleDeclaration[] | undefined,\n    start: number,\n    end: number = start,\n  ) {\n    if (end > start) {\n      this.removeStyleFromTo(start, end);\n    }\n    const graphemes = this.graphemeSplit(text);\n    this.insertNewStyleBlock(graphemes, start, style);\n    this._text = [\n      ...this._text.slice(0, start),\n      ...graphemes,\n      ...this._text.slice(end),\n    ];\n    this.text = this._text.join('');\n    this.set('dirty', true);\n    this.initDimensions();\n    this.setCoords();\n    this._removeExtraneousStyles();\n  }\n\n  /**\n   * Set the selectionStart and selectionEnd according to the new position of cursor\n   * mimic the key - mouse navigation when shift is pressed.\n   */\n  setSelectionStartEndWithShift(\n    start: number,\n    end: number,\n    newSelection: number,\n  ) {\n    if (newSelection <= start) {\n      if (end === start) {\n        this._selectionDirection = LEFT;\n      } else if (this._selectionDirection === RIGHT) {\n        this._selectionDirection = LEFT;\n        this.selectionEnd = start;\n      }\n      this.selectionStart = newSelection;\n    } else if (newSelection > start && newSelection < end) {\n      if (this._selectionDirection === RIGHT) {\n        this.selectionEnd = newSelection;\n      } else {\n        this.selectionStart = newSelection;\n      }\n    } else {\n      // newSelection is > selection start and end\n      if (end === start) {\n        this._selectionDirection = RIGHT;\n      } else if (this._selectionDirection === LEFT) {\n        this._selectionDirection = RIGHT;\n        this.selectionStart = end;\n      }\n      this.selectionEnd = newSelection;\n    }\n  }\n}\n"],"names":["reNonWord","ITextBehavior","FabricText","constructor","arguments","_defineProperty","initBehavior","_tick","bind","_onTickComplete","updateSelectionOnMouseMove","onDeselect","options","isEditing","exitEditing","selected","_animateCursor","_ref","toValue","duration","delay","onComplete","animate","startValue","_currentCursorOpacity","endValue","abort","canvas","selectionStart","selectionEnd","onChange","value","renderCursorOrSelection","_currentTickState","cursorDuration","Math","max","_this$_currentTickCom","_currentTickCompleteState","initDelayedCursor","restart","abortCursorAnimation","cursorDelay","shouldClear","forEach","cursorAnimation","isDone","clearContextTop","restartCursorIfNeeded","some","selectAll","_text","length","_fireSelectionChanged","_updateTextarea","cmdAll","getSelectedText","slice","join","findWordBoundaryLeft","startFrom","offset","index","_reSpace","test","findWordBoundaryRight","findLineBoundaryLeft","findLineBoundaryRight","searchWordBoundary","direction","text","reNewline","_char","selectWord","newSelectionStart","newSelectionEnd","selectLine","enterEditing","e","editable","enterEditingImpl","fire","undefined","target","requestRenderAll","calcOffset","textEditingManager","exitTextEditing","initHiddenTextarea","hiddenTextarea","focus","_saveEditingProps","_setEditingProps","_textBeforeEdit","getActiveControl","el","getDocumentFromElement","activeElement","getSelectionStartFromPointer","currentStart","currentEnd","__selectionStartOnMouseDown","hoverCursor","defaultCursor","moveCursor","borderColor","editingBorderColor","hasControls","selectable","lockMovementX","lockMovementY","fromStringToGraphemeSelection","start","end","smallerTextStart","graphemeStart","graphemeSplit","smallerTextEnd","graphemeEnd","fromGraphemeToStringSelection","graphemes","cursorOffsetCache","inCompositionMode","newSelection","updateTextareaPosition","updateFromTextArea","textarea","set","initDimensions","setCoords","style","_calcTextareaPosition","left","top","desiredPosition","compositionStart","boundaries","_getCursorBoundaries","cursorLocation","get2DCursorLocation","lineIndex","charIndex","charHeight","getValueOfPropertyAt","lineHeight","leftOffset","retinaScaling","getCanvasRetinaScaling","upperCanvas","upperCanvasEl","upperCanvasWidth","width","upperCanvasHeight","height","maxWidth","maxHeight","p","Point","topOffset","transform","calcTransformMatrix","viewportTransform","multiply","clientWidth","clientHeight","x","y","_offset","fontSize","_savedProps","_restoreEditingProps","exitEditingImpl","blur","parentNode","removeChild","_forceClearCache","isTextChanged","MODIFIED","_removeExtraneousStyles","prop","styles","_textLines","removeStyleFromTo","lineStart","charStart","lineEnd","charEnd","i","_unwrappedTextLines","styleObj","shiftLineStyles","diff","char","numericChar","parseInt","clonedStyles","Object","assign","line","numericLine","insertNewlineStyleObject","qty","copiedStyle","newLineStyles","originalLineLength","isEndOfLine","someStyleIsCarryingOver","currentCharStyle","numIndex","styleCarriedOver","insertCharStyleObject","quantity","currentLineStyles","currentLineStylesCloned","numericIndex","keys","newStyle","insertNewStyleBlock","insertedText","cursorLoc","addedLines","linesLength","removeChars","splice","insertChars","setSelectionStartEndWithShift","_selectionDirection","LEFT","RIGHT"],"mappings":"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"}